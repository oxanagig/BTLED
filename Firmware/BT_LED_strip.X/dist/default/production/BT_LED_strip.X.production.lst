

Microchip Technology PIC PRO Macro Assembler V1.33 build 59893 
                                                                                               Mon Feb  2 16:23:21 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	12F1822
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	swtext1,local,class=CONST,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	swtext2,local,class=CONST,delta=2
    24                           	psect	swtext3,local,class=CONST,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	pa_nodes,global,class=CODE,delta=2
    39                           	dabs	1,0x7E,2
    40  0000                     	;# 
    41  0001                     	;# 
    42  0002                     	;# 
    43  0003                     	;# 
    44  0004                     	;# 
    45  0005                     	;# 
    46  0006                     	;# 
    47  0007                     	;# 
    48  0008                     	;# 
    49  0009                     	;# 
    50  000A                     	;# 
    51  000B                     	;# 
    52  000C                     	;# 
    53  0011                     	;# 
    54  0012                     	;# 
    55  0015                     	;# 
    56  0016                     	;# 
    57  0016                     	;# 
    58  0017                     	;# 
    59  0018                     	;# 
    60  0019                     	;# 
    61  001A                     	;# 
    62  001B                     	;# 
    63  001C                     	;# 
    64  001E                     	;# 
    65  001F                     	;# 
    66  008C                     	;# 
    67  0091                     	;# 
    68  0092                     	;# 
    69  0095                     	;# 
    70  0096                     	;# 
    71  0097                     	;# 
    72  0098                     	;# 
    73  0099                     	;# 
    74  009A                     	;# 
    75  009B                     	;# 
    76  009B                     	;# 
    77  009C                     	;# 
    78  009D                     	;# 
    79  009E                     	;# 
    80  010C                     	;# 
    81  0111                     	;# 
    82  0112                     	;# 
    83  0115                     	;# 
    84  0116                     	;# 
    85  0117                     	;# 
    86  0118                     	;# 
    87  0119                     	;# 
    88  011A                     	;# 
    89  011B                     	;# 
    90  011D                     	;# 
    91  011D                     	;# 
    92  018C                     	;# 
    93  0191                     	;# 
    94  0191                     	;# 
    95  0192                     	;# 
    96  0193                     	;# 
    97  0193                     	;# 
    98  0193                     	;# 
    99  0194                     	;# 
   100  0195                     	;# 
   101  0196                     	;# 
   102  0199                     	;# 
   103  019A                     	;# 
   104  019B                     	;# 
   105  019B                     	;# 
   106  019B                     	;# 
   107  019B                     	;# 
   108  019C                     	;# 
   109  019C                     	;# 
   110  019D                     	;# 
   111  019E                     	;# 
   112  019F                     	;# 
   113  020C                     	;# 
   114  0211                     	;# 
   115  0211                     	;# 
   116  0212                     	;# 
   117  0212                     	;# 
   118  0213                     	;# 
   119  0213                     	;# 
   120  0214                     	;# 
   121  0214                     	;# 
   122  0215                     	;# 
   123  0215                     	;# 
   124  0215                     	;# 
   125  0216                     	;# 
   126  0216                     	;# 
   127  0217                     	;# 
   128  0217                     	;# 
   129  0291                     	;# 
   130  0291                     	;# 
   131  0292                     	;# 
   132  0293                     	;# 
   133  0294                     	;# 
   134  0295                     	;# 
   135  0295                     	;# 
   136  0296                     	;# 
   137  0391                     	;# 
   138  0392                     	;# 
   139  0393                     	;# 
   140  039A                     	;# 
   141  039C                     	;# 
   142  039D                     	;# 
   143  039E                     	;# 
   144  039F                     	;# 
   145  0FE4                     	;# 
   146  0FE5                     	;# 
   147  0FE6                     	;# 
   148  0FE7                     	;# 
   149  0FE8                     	;# 
   150  0FE9                     	;# 
   151  0FEA                     	;# 
   152  0FEB                     	;# 
   153  0FED                     	;# 
   154  0FEE                     	;# 
   155  0FEF                     	;# 
   156  0000                     	;# 
   157  0001                     	;# 
   158  0002                     	;# 
   159  0003                     	;# 
   160  0004                     	;# 
   161  0005                     	;# 
   162  0006                     	;# 
   163  0007                     	;# 
   164  0008                     	;# 
   165  0009                     	;# 
   166  000A                     	;# 
   167  000B                     	;# 
   168  000C                     	;# 
   169  0011                     	;# 
   170  0012                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001E                     	;# 
   181  001F                     	;# 
   182  008C                     	;# 
   183  0091                     	;# 
   184  0092                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009B                     	;# 
   193  009C                     	;# 
   194  009D                     	;# 
   195  009E                     	;# 
   196  010C                     	;# 
   197  0111                     	;# 
   198  0112                     	;# 
   199  0115                     	;# 
   200  0116                     	;# 
   201  0117                     	;# 
   202  0118                     	;# 
   203  0119                     	;# 
   204  011A                     	;# 
   205  011B                     	;# 
   206  011D                     	;# 
   207  011D                     	;# 
   208  018C                     	;# 
   209  0191                     	;# 
   210  0191                     	;# 
   211  0192                     	;# 
   212  0193                     	;# 
   213  0193                     	;# 
   214  0193                     	;# 
   215  0194                     	;# 
   216  0195                     	;# 
   217  0196                     	;# 
   218  0199                     	;# 
   219  019A                     	;# 
   220  019B                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019C                     	;# 
   225  019C                     	;# 
   226  019D                     	;# 
   227  019E                     	;# 
   228  019F                     	;# 
   229  020C                     	;# 
   230  0211                     	;# 
   231  0211                     	;# 
   232  0212                     	;# 
   233  0212                     	;# 
   234  0213                     	;# 
   235  0213                     	;# 
   236  0214                     	;# 
   237  0214                     	;# 
   238  0215                     	;# 
   239  0215                     	;# 
   240  0215                     	;# 
   241  0216                     	;# 
   242  0216                     	;# 
   243  0217                     	;# 
   244  0217                     	;# 
   245  0291                     	;# 
   246  0291                     	;# 
   247  0292                     	;# 
   248  0293                     	;# 
   249  0294                     	;# 
   250  0295                     	;# 
   251  0295                     	;# 
   252  0296                     	;# 
   253  0391                     	;# 
   254  0392                     	;# 
   255  0393                     	;# 
   256  039A                     	;# 
   257  039C                     	;# 
   258  039D                     	;# 
   259  039E                     	;# 
   260  039F                     	;# 
   261  0FE4                     	;# 
   262  0FE5                     	;# 
   263  0FE6                     	;# 
   264  0FE7                     	;# 
   265  0FE8                     	;# 
   266  0FE9                     	;# 
   267  0FEA                     	;# 
   268  0FEB                     	;# 
   269  0FED                     	;# 
   270  0FEE                     	;# 
   271  0FEF                     	;# 
   272  0000                     	;# 
   273  0001                     	;# 
   274  0002                     	;# 
   275  0003                     	;# 
   276  0004                     	;# 
   277  0005                     	;# 
   278  0006                     	;# 
   279  0007                     	;# 
   280  0008                     	;# 
   281  0009                     	;# 
   282  000A                     	;# 
   283  000B                     	;# 
   284  000C                     	;# 
   285  0011                     	;# 
   286  0012                     	;# 
   287  0015                     	;# 
   288  0016                     	;# 
   289  0016                     	;# 
   290  0017                     	;# 
   291  0018                     	;# 
   292  0019                     	;# 
   293  001A                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  001E                     	;# 
   297  001F                     	;# 
   298  008C                     	;# 
   299  0091                     	;# 
   300  0092                     	;# 
   301  0095                     	;# 
   302  0096                     	;# 
   303  0097                     	;# 
   304  0098                     	;# 
   305  0099                     	;# 
   306  009A                     	;# 
   307  009B                     	;# 
   308  009B                     	;# 
   309  009C                     	;# 
   310  009D                     	;# 
   311  009E                     	;# 
   312  010C                     	;# 
   313  0111                     	;# 
   314  0112                     	;# 
   315  0115                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  0118                     	;# 
   319  0119                     	;# 
   320  011A                     	;# 
   321  011B                     	;# 
   322  011D                     	;# 
   323  011D                     	;# 
   324  018C                     	;# 
   325  0191                     	;# 
   326  0191                     	;# 
   327  0192                     	;# 
   328  0193                     	;# 
   329  0193                     	;# 
   330  0193                     	;# 
   331  0194                     	;# 
   332  0195                     	;# 
   333  0196                     	;# 
   334  0199                     	;# 
   335  019A                     	;# 
   336  019B                     	;# 
   337  019B                     	;# 
   338  019B                     	;# 
   339  019B                     	;# 
   340  019C                     	;# 
   341  019C                     	;# 
   342  019D                     	;# 
   343  019E                     	;# 
   344  019F                     	;# 
   345  020C                     	;# 
   346  0211                     	;# 
   347  0211                     	;# 
   348  0212                     	;# 
   349  0212                     	;# 
   350  0213                     	;# 
   351  0213                     	;# 
   352  0214                     	;# 
   353  0214                     	;# 
   354  0215                     	;# 
   355  0215                     	;# 
   356  0215                     	;# 
   357  0216                     	;# 
   358  0216                     	;# 
   359  0217                     	;# 
   360  0217                     	;# 
   361  0291                     	;# 
   362  0291                     	;# 
   363  0292                     	;# 
   364  0293                     	;# 
   365  0294                     	;# 
   366  0295                     	;# 
   367  0295                     	;# 
   368  0296                     	;# 
   369  0391                     	;# 
   370  0392                     	;# 
   371  0393                     	;# 
   372  039A                     	;# 
   373  039C                     	;# 
   374  039D                     	;# 
   375  039E                     	;# 
   376  039F                     	;# 
   377  0FE4                     	;# 
   378  0FE5                     	;# 
   379  0FE6                     	;# 
   380  0FE7                     	;# 
   381  0FE8                     	;# 
   382  0FE9                     	;# 
   383  0FEA                     	;# 
   384  0FEB                     	;# 
   385  0FED                     	;# 
   386  0FEE                     	;# 
   387  0FEF                     	;# 
   388  0000                     	;# 
   389  0001                     	;# 
   390  0002                     	;# 
   391  0003                     	;# 
   392  0004                     	;# 
   393  0005                     	;# 
   394  0006                     	;# 
   395  0007                     	;# 
   396  0008                     	;# 
   397  0009                     	;# 
   398  000A                     	;# 
   399  000B                     	;# 
   400  000C                     	;# 
   401  0011                     	;# 
   402  0012                     	;# 
   403  0015                     	;# 
   404  0016                     	;# 
   405  0016                     	;# 
   406  0017                     	;# 
   407  0018                     	;# 
   408  0019                     	;# 
   409  001A                     	;# 
   410  001B                     	;# 
   411  001C                     	;# 
   412  001E                     	;# 
   413  001F                     	;# 
   414  008C                     	;# 
   415  0091                     	;# 
   416  0092                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0097                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009A                     	;# 
   423  009B                     	;# 
   424  009B                     	;# 
   425  009C                     	;# 
   426  009D                     	;# 
   427  009E                     	;# 
   428  010C                     	;# 
   429  0111                     	;# 
   430  0112                     	;# 
   431  0115                     	;# 
   432  0116                     	;# 
   433  0117                     	;# 
   434  0118                     	;# 
   435  0119                     	;# 
   436  011A                     	;# 
   437  011B                     	;# 
   438  011D                     	;# 
   439  011D                     	;# 
   440  018C                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020C                     	;# 
   462  0211                     	;# 
   463  0211                     	;# 
   464  0212                     	;# 
   465  0212                     	;# 
   466  0213                     	;# 
   467  0213                     	;# 
   468  0214                     	;# 
   469  0214                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0216                     	;# 
   474  0216                     	;# 
   475  0217                     	;# 
   476  0217                     	;# 
   477  0291                     	;# 
   478  0291                     	;# 
   479  0292                     	;# 
   480  0293                     	;# 
   481  0294                     	;# 
   482  0295                     	;# 
   483  0295                     	;# 
   484  0296                     	;# 
   485  0391                     	;# 
   486  0392                     	;# 
   487  0393                     	;# 
   488  039A                     	;# 
   489  039C                     	;# 
   490  039D                     	;# 
   491  039E                     	;# 
   492  039F                     	;# 
   493  0FE4                     	;# 
   494  0FE5                     	;# 
   495  0FE6                     	;# 
   496  0FE7                     	;# 
   497  0FE8                     	;# 
   498  0FE9                     	;# 
   499  0FEA                     	;# 
   500  0FEB                     	;# 
   501  0FED                     	;# 
   502  0FEE                     	;# 
   503  0FEF                     	;# 
   504  0000                     	;# 
   505  0001                     	;# 
   506  0002                     	;# 
   507  0003                     	;# 
   508  0004                     	;# 
   509  0005                     	;# 
   510  0006                     	;# 
   511  0007                     	;# 
   512  0008                     	;# 
   513  0009                     	;# 
   514  000A                     	;# 
   515  000B                     	;# 
   516  000C                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  001E                     	;# 
   529  001F                     	;# 
   530  008C                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0098                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  0111                     	;# 
   546  0112                     	;# 
   547  0115                     	;# 
   548  0116                     	;# 
   549  0117                     	;# 
   550  0118                     	;# 
   551  0119                     	;# 
   552  011A                     	;# 
   553  011B                     	;# 
   554  011D                     	;# 
   555  011D                     	;# 
   556  018C                     	;# 
   557  0191                     	;# 
   558  0191                     	;# 
   559  0192                     	;# 
   560  0193                     	;# 
   561  0193                     	;# 
   562  0193                     	;# 
   563  0194                     	;# 
   564  0195                     	;# 
   565  0196                     	;# 
   566  0199                     	;# 
   567  019A                     	;# 
   568  019B                     	;# 
   569  019B                     	;# 
   570  019B                     	;# 
   571  019B                     	;# 
   572  019C                     	;# 
   573  019C                     	;# 
   574  019D                     	;# 
   575  019E                     	;# 
   576  019F                     	;# 
   577  020C                     	;# 
   578  0211                     	;# 
   579  0211                     	;# 
   580  0212                     	;# 
   581  0212                     	;# 
   582  0213                     	;# 
   583  0213                     	;# 
   584  0214                     	;# 
   585  0214                     	;# 
   586  0215                     	;# 
   587  0215                     	;# 
   588  0215                     	;# 
   589  0216                     	;# 
   590  0216                     	;# 
   591  0217                     	;# 
   592  0217                     	;# 
   593  0291                     	;# 
   594  0291                     	;# 
   595  0292                     	;# 
   596  0293                     	;# 
   597  0294                     	;# 
   598  0295                     	;# 
   599  0295                     	;# 
   600  0296                     	;# 
   601  0391                     	;# 
   602  0392                     	;# 
   603  0393                     	;# 
   604  039A                     	;# 
   605  039C                     	;# 
   606  039D                     	;# 
   607  039E                     	;# 
   608  039F                     	;# 
   609  0FE4                     	;# 
   610  0FE5                     	;# 
   611  0FE6                     	;# 
   612  0FE7                     	;# 
   613  0FE8                     	;# 
   614  0FE9                     	;# 
   615  0FEA                     	;# 
   616  0FEB                     	;# 
   617  0FED                     	;# 
   618  0FEE                     	;# 
   619  0FEF                     	;# 
   620  0000                     	;# 
   621  0001                     	;# 
   622  0002                     	;# 
   623  0003                     	;# 
   624  0004                     	;# 
   625  0005                     	;# 
   626  0006                     	;# 
   627  0007                     	;# 
   628  0008                     	;# 
   629  0009                     	;# 
   630  000A                     	;# 
   631  000B                     	;# 
   632  000C                     	;# 
   633  0011                     	;# 
   634  0012                     	;# 
   635  0015                     	;# 
   636  0016                     	;# 
   637  0016                     	;# 
   638  0017                     	;# 
   639  0018                     	;# 
   640  0019                     	;# 
   641  001A                     	;# 
   642  001B                     	;# 
   643  001C                     	;# 
   644  001E                     	;# 
   645  001F                     	;# 
   646  008C                     	;# 
   647  0091                     	;# 
   648  0092                     	;# 
   649  0095                     	;# 
   650  0096                     	;# 
   651  0097                     	;# 
   652  0098                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  010C                     	;# 
   661  0111                     	;# 
   662  0112                     	;# 
   663  0115                     	;# 
   664  0116                     	;# 
   665  0117                     	;# 
   666  0118                     	;# 
   667  0119                     	;# 
   668  011A                     	;# 
   669  011B                     	;# 
   670  011D                     	;# 
   671  011D                     	;# 
   672  018C                     	;# 
   673  0191                     	;# 
   674  0191                     	;# 
   675  0192                     	;# 
   676  0193                     	;# 
   677  0193                     	;# 
   678  0193                     	;# 
   679  0194                     	;# 
   680  0195                     	;# 
   681  0196                     	;# 
   682  0199                     	;# 
   683  019A                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019B                     	;# 
   687  019B                     	;# 
   688  019C                     	;# 
   689  019C                     	;# 
   690  019D                     	;# 
   691  019E                     	;# 
   692  019F                     	;# 
   693  020C                     	;# 
   694  0211                     	;# 
   695  0211                     	;# 
   696  0212                     	;# 
   697  0212                     	;# 
   698  0213                     	;# 
   699  0213                     	;# 
   700  0214                     	;# 
   701  0214                     	;# 
   702  0215                     	;# 
   703  0215                     	;# 
   704  0215                     	;# 
   705  0216                     	;# 
   706  0216                     	;# 
   707  0217                     	;# 
   708  0217                     	;# 
   709  0291                     	;# 
   710  0291                     	;# 
   711  0292                     	;# 
   712  0293                     	;# 
   713  0294                     	;# 
   714  0295                     	;# 
   715  0295                     	;# 
   716  0296                     	;# 
   717  0391                     	;# 
   718  0392                     	;# 
   719  0393                     	;# 
   720  039A                     	;# 
   721  039C                     	;# 
   722  039D                     	;# 
   723  039E                     	;# 
   724  039F                     	;# 
   725  0FE4                     	;# 
   726  0FE5                     	;# 
   727  0FE6                     	;# 
   728  0FE7                     	;# 
   729  0FE8                     	;# 
   730  0FE9                     	;# 
   731  0FEA                     	;# 
   732  0FEB                     	;# 
   733  0FED                     	;# 
   734  0FEE                     	;# 
   735  0FEF                     	;# 
   736  0000                     	;# 
   737  0001                     	;# 
   738  0002                     	;# 
   739  0003                     	;# 
   740  0004                     	;# 
   741  0005                     	;# 
   742  0006                     	;# 
   743  0007                     	;# 
   744  0008                     	;# 
   745  0009                     	;# 
   746  000A                     	;# 
   747  000B                     	;# 
   748  000C                     	;# 
   749  0011                     	;# 
   750  0012                     	;# 
   751  0015                     	;# 
   752  0016                     	;# 
   753  0016                     	;# 
   754  0017                     	;# 
   755  0018                     	;# 
   756  0019                     	;# 
   757  001A                     	;# 
   758  001B                     	;# 
   759  001C                     	;# 
   760  001E                     	;# 
   761  001F                     	;# 
   762  008C                     	;# 
   763  0091                     	;# 
   764  0092                     	;# 
   765  0095                     	;# 
   766  0096                     	;# 
   767  0097                     	;# 
   768  0098                     	;# 
   769  0099                     	;# 
   770  009A                     	;# 
   771  009B                     	;# 
   772  009B                     	;# 
   773  009C                     	;# 
   774  009D                     	;# 
   775  009E                     	;# 
   776  010C                     	;# 
   777  0111                     	;# 
   778  0112                     	;# 
   779  0115                     	;# 
   780  0116                     	;# 
   781  0117                     	;# 
   782  0118                     	;# 
   783  0119                     	;# 
   784  011A                     	;# 
   785  011B                     	;# 
   786  011D                     	;# 
   787  011D                     	;# 
   788  018C                     	;# 
   789  0191                     	;# 
   790  0191                     	;# 
   791  0192                     	;# 
   792  0193                     	;# 
   793  0193                     	;# 
   794  0193                     	;# 
   795  0194                     	;# 
   796  0195                     	;# 
   797  0196                     	;# 
   798  0199                     	;# 
   799  019A                     	;# 
   800  019B                     	;# 
   801  019B                     	;# 
   802  019B                     	;# 
   803  019B                     	;# 
   804  019C                     	;# 
   805  019C                     	;# 
   806  019D                     	;# 
   807  019E                     	;# 
   808  019F                     	;# 
   809  020C                     	;# 
   810  0211                     	;# 
   811  0211                     	;# 
   812  0212                     	;# 
   813  0212                     	;# 
   814  0213                     	;# 
   815  0213                     	;# 
   816  0214                     	;# 
   817  0214                     	;# 
   818  0215                     	;# 
   819  0215                     	;# 
   820  0215                     	;# 
   821  0216                     	;# 
   822  0216                     	;# 
   823  0217                     	;# 
   824  0217                     	;# 
   825  0291                     	;# 
   826  0291                     	;# 
   827  0292                     	;# 
   828  0293                     	;# 
   829  0294                     	;# 
   830  0295                     	;# 
   831  0295                     	;# 
   832  0296                     	;# 
   833  0391                     	;# 
   834  0392                     	;# 
   835  0393                     	;# 
   836  039A                     	;# 
   837  039C                     	;# 
   838  039D                     	;# 
   839  039E                     	;# 
   840  039F                     	;# 
   841  0FE4                     	;# 
   842  0FE5                     	;# 
   843  0FE6                     	;# 
   844  0FE7                     	;# 
   845  0FE8                     	;# 
   846  0FE9                     	;# 
   847  0FEA                     	;# 
   848  0FEB                     	;# 
   849  0FED                     	;# 
   850  0FEE                     	;# 
   851  0FEF                     	;# 
   852  0000                     	;# 
   853  0001                     	;# 
   854  0002                     	;# 
   855  0003                     	;# 
   856  0004                     	;# 
   857  0005                     	;# 
   858  0006                     	;# 
   859  0007                     	;# 
   860  0008                     	;# 
   861  0009                     	;# 
   862  000A                     	;# 
   863  000B                     	;# 
   864  000C                     	;# 
   865  0011                     	;# 
   866  0012                     	;# 
   867  0015                     	;# 
   868  0016                     	;# 
   869  0016                     	;# 
   870  0017                     	;# 
   871  0018                     	;# 
   872  0019                     	;# 
   873  001A                     	;# 
   874  001B                     	;# 
   875  001C                     	;# 
   876  001E                     	;# 
   877  001F                     	;# 
   878  008C                     	;# 
   879  0091                     	;# 
   880  0092                     	;# 
   881  0095                     	;# 
   882  0096                     	;# 
   883  0097                     	;# 
   884  0098                     	;# 
   885  0099                     	;# 
   886  009A                     	;# 
   887  009B                     	;# 
   888  009B                     	;# 
   889  009C                     	;# 
   890  009D                     	;# 
   891  009E                     	;# 
   892  010C                     	;# 
   893  0111                     	;# 
   894  0112                     	;# 
   895  0115                     	;# 
   896  0116                     	;# 
   897  0117                     	;# 
   898  0118                     	;# 
   899  0119                     	;# 
   900  011A                     	;# 
   901  011B                     	;# 
   902  011D                     	;# 
   903  011D                     	;# 
   904  018C                     	;# 
   905  0191                     	;# 
   906  0191                     	;# 
   907  0192                     	;# 
   908  0193                     	;# 
   909  0193                     	;# 
   910  0193                     	;# 
   911  0194                     	;# 
   912  0195                     	;# 
   913  0196                     	;# 
   914  0199                     	;# 
   915  019A                     	;# 
   916  019B                     	;# 
   917  019B                     	;# 
   918  019B                     	;# 
   919  019B                     	;# 
   920  019C                     	;# 
   921  019C                     	;# 
   922  019D                     	;# 
   923  019E                     	;# 
   924  019F                     	;# 
   925  020C                     	;# 
   926  0211                     	;# 
   927  0211                     	;# 
   928  0212                     	;# 
   929  0212                     	;# 
   930  0213                     	;# 
   931  0213                     	;# 
   932  0214                     	;# 
   933  0214                     	;# 
   934  0215                     	;# 
   935  0215                     	;# 
   936  0215                     	;# 
   937  0216                     	;# 
   938  0216                     	;# 
   939  0217                     	;# 
   940  0217                     	;# 
   941  0291                     	;# 
   942  0291                     	;# 
   943  0292                     	;# 
   944  0293                     	;# 
   945  0294                     	;# 
   946  0295                     	;# 
   947  0295                     	;# 
   948  0296                     	;# 
   949  0391                     	;# 
   950  0392                     	;# 
   951  0393                     	;# 
   952  039A                     	;# 
   953  039C                     	;# 
   954  039D                     	;# 
   955  039E                     	;# 
   956  039F                     	;# 
   957  0FE4                     	;# 
   958  0FE5                     	;# 
   959  0FE6                     	;# 
   960  0FE7                     	;# 
   961  0FE8                     	;# 
   962  0FE9                     	;# 
   963  0FEA                     	;# 
   964  0FEB                     	;# 
   965  0FED                     	;# 
   966  0FEE                     	;# 
   967  0FEF                     	;# 
   968  0000                     	;# 
   969  0001                     	;# 
   970  0002                     	;# 
   971  0003                     	;# 
   972  0004                     	;# 
   973  0005                     	;# 
   974  0006                     	;# 
   975  0007                     	;# 
   976  0008                     	;# 
   977  0009                     	;# 
   978  000A                     	;# 
   979  000B                     	;# 
   980  000C                     	;# 
   981  0011                     	;# 
   982  0012                     	;# 
   983  0015                     	;# 
   984  0016                     	;# 
   985  0016                     	;# 
   986  0017                     	;# 
   987  0018                     	;# 
   988  0019                     	;# 
   989  001A                     	;# 
   990  001B                     	;# 
   991  001C                     	;# 
   992  001E                     	;# 
   993  001F                     	;# 
   994  008C                     	;# 
   995  0091                     	;# 
   996  0092                     	;# 
   997  0095                     	;# 
   998  0096                     	;# 
   999  0097                     	;# 
  1000  0098                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  010C                     	;# 
  1009  0111                     	;# 
  1010  0112                     	;# 
  1011  0115                     	;# 
  1012  0116                     	;# 
  1013  0117                     	;# 
  1014  0118                     	;# 
  1015  0119                     	;# 
  1016  011A                     	;# 
  1017  011B                     	;# 
  1018  011D                     	;# 
  1019  011D                     	;# 
  1020  018C                     	;# 
  1021  0191                     	;# 
  1022  0191                     	;# 
  1023  0192                     	;# 
  1024  0193                     	;# 
  1025  0193                     	;# 
  1026  0193                     	;# 
  1027  0194                     	;# 
  1028  0195                     	;# 
  1029  0196                     	;# 
  1030  0199                     	;# 
  1031  019A                     	;# 
  1032  019B                     	;# 
  1033  019B                     	;# 
  1034  019B                     	;# 
  1035  019B                     	;# 
  1036  019C                     	;# 
  1037  019C                     	;# 
  1038  019D                     	;# 
  1039  019E                     	;# 
  1040  019F                     	;# 
  1041  020C                     	;# 
  1042  0211                     	;# 
  1043  0211                     	;# 
  1044  0212                     	;# 
  1045  0212                     	;# 
  1046  0213                     	;# 
  1047  0213                     	;# 
  1048  0214                     	;# 
  1049  0214                     	;# 
  1050  0215                     	;# 
  1051  0215                     	;# 
  1052  0215                     	;# 
  1053  0216                     	;# 
  1054  0216                     	;# 
  1055  0217                     	;# 
  1056  0217                     	;# 
  1057  0291                     	;# 
  1058  0291                     	;# 
  1059  0292                     	;# 
  1060  0293                     	;# 
  1061  0294                     	;# 
  1062  0295                     	;# 
  1063  0295                     	;# 
  1064  0296                     	;# 
  1065  0391                     	;# 
  1066  0392                     	;# 
  1067  0393                     	;# 
  1068  039A                     	;# 
  1069  039C                     	;# 
  1070  039D                     	;# 
  1071  039E                     	;# 
  1072  039F                     	;# 
  1073  0FE4                     	;# 
  1074  0FE5                     	;# 
  1075  0FE6                     	;# 
  1076  0FE7                     	;# 
  1077  0FE8                     	;# 
  1078  0FE9                     	;# 
  1079  0FEA                     	;# 
  1080  0FEB                     	;# 
  1081  0FED                     	;# 
  1082  0FEE                     	;# 
  1083  0FEF                     	;# 
  1084  0000                     	;# 
  1085  0001                     	;# 
  1086  0002                     	;# 
  1087  0003                     	;# 
  1088  0004                     	;# 
  1089  0005                     	;# 
  1090  0006                     	;# 
  1091  0007                     	;# 
  1092  0008                     	;# 
  1093  0009                     	;# 
  1094  000A                     	;# 
  1095  000B                     	;# 
  1096  000C                     	;# 
  1097  0011                     	;# 
  1098  0012                     	;# 
  1099  0015                     	;# 
  1100  0016                     	;# 
  1101  0016                     	;# 
  1102  0017                     	;# 
  1103  0018                     	;# 
  1104  0019                     	;# 
  1105  001A                     	;# 
  1106  001B                     	;# 
  1107  001C                     	;# 
  1108  001E                     	;# 
  1109  001F                     	;# 
  1110  008C                     	;# 
  1111  0091                     	;# 
  1112  0092                     	;# 
  1113  0095                     	;# 
  1114  0096                     	;# 
  1115  0097                     	;# 
  1116  0098                     	;# 
  1117  0099                     	;# 
  1118  009A                     	;# 
  1119  009B                     	;# 
  1120  009B                     	;# 
  1121  009C                     	;# 
  1122  009D                     	;# 
  1123  009E                     	;# 
  1124  010C                     	;# 
  1125  0111                     	;# 
  1126  0112                     	;# 
  1127  0115                     	;# 
  1128  0116                     	;# 
  1129  0117                     	;# 
  1130  0118                     	;# 
  1131  0119                     	;# 
  1132  011A                     	;# 
  1133  011B                     	;# 
  1134  011D                     	;# 
  1135  011D                     	;# 
  1136  018C                     	;# 
  1137  0191                     	;# 
  1138  0191                     	;# 
  1139  0192                     	;# 
  1140  0193                     	;# 
  1141  0193                     	;# 
  1142  0193                     	;# 
  1143  0194                     	;# 
  1144  0195                     	;# 
  1145  0196                     	;# 
  1146  0199                     	;# 
  1147  019A                     	;# 
  1148  019B                     	;# 
  1149  019B                     	;# 
  1150  019B                     	;# 
  1151  019B                     	;# 
  1152  019C                     	;# 
  1153  019C                     	;# 
  1154  019D                     	;# 
  1155  019E                     	;# 
  1156  019F                     	;# 
  1157  020C                     	;# 
  1158  0211                     	;# 
  1159  0211                     	;# 
  1160  0212                     	;# 
  1161  0212                     	;# 
  1162  0213                     	;# 
  1163  0213                     	;# 
  1164  0214                     	;# 
  1165  0214                     	;# 
  1166  0215                     	;# 
  1167  0215                     	;# 
  1168  0215                     	;# 
  1169  0216                     	;# 
  1170  0216                     	;# 
  1171  0217                     	;# 
  1172  0217                     	;# 
  1173  0291                     	;# 
  1174  0291                     	;# 
  1175  0292                     	;# 
  1176  0293                     	;# 
  1177  0294                     	;# 
  1178  0295                     	;# 
  1179  0295                     	;# 
  1180  0296                     	;# 
  1181  0391                     	;# 
  1182  0392                     	;# 
  1183  0393                     	;# 
  1184  039A                     	;# 
  1185  039C                     	;# 
  1186  039D                     	;# 
  1187  039E                     	;# 
  1188  039F                     	;# 
  1189  0FE4                     	;# 
  1190  0FE5                     	;# 
  1191  0FE6                     	;# 
  1192  0FE7                     	;# 
  1193  0FE8                     	;# 
  1194  0FE9                     	;# 
  1195  0FEA                     	;# 
  1196  0FEB                     	;# 
  1197  0FED                     	;# 
  1198  0FEE                     	;# 
  1199  0FEF                     	;# 
  1200  0000                     	;# 
  1201  0001                     	;# 
  1202  0002                     	;# 
  1203  0003                     	;# 
  1204  0004                     	;# 
  1205  0005                     	;# 
  1206  0006                     	;# 
  1207  0007                     	;# 
  1208  0008                     	;# 
  1209  0009                     	;# 
  1210  000A                     	;# 
  1211  000B                     	;# 
  1212  000C                     	;# 
  1213  0011                     	;# 
  1214  0012                     	;# 
  1215  0015                     	;# 
  1216  0016                     	;# 
  1217  0016                     	;# 
  1218  0017                     	;# 
  1219  0018                     	;# 
  1220  0019                     	;# 
  1221  001A                     	;# 
  1222  001B                     	;# 
  1223  001C                     	;# 
  1224  001E                     	;# 
  1225  001F                     	;# 
  1226  008C                     	;# 
  1227  0091                     	;# 
  1228  0092                     	;# 
  1229  0095                     	;# 
  1230  0096                     	;# 
  1231  0097                     	;# 
  1232  0098                     	;# 
  1233  0099                     	;# 
  1234  009A                     	;# 
  1235  009B                     	;# 
  1236  009B                     	;# 
  1237  009C                     	;# 
  1238  009D                     	;# 
  1239  009E                     	;# 
  1240  010C                     	;# 
  1241  0111                     	;# 
  1242  0112                     	;# 
  1243  0115                     	;# 
  1244  0116                     	;# 
  1245  0117                     	;# 
  1246  0118                     	;# 
  1247  0119                     	;# 
  1248  011A                     	;# 
  1249  011B                     	;# 
  1250  011D                     	;# 
  1251  011D                     	;# 
  1252  018C                     	;# 
  1253  0191                     	;# 
  1254  0191                     	;# 
  1255  0192                     	;# 
  1256  0193                     	;# 
  1257  0193                     	;# 
  1258  0193                     	;# 
  1259  0194                     	;# 
  1260  0195                     	;# 
  1261  0196                     	;# 
  1262  0199                     	;# 
  1263  019A                     	;# 
  1264  019B                     	;# 
  1265  019B                     	;# 
  1266  019B                     	;# 
  1267  019B                     	;# 
  1268  019C                     	;# 
  1269  019C                     	;# 
  1270  019D                     	;# 
  1271  019E                     	;# 
  1272  019F                     	;# 
  1273  020C                     	;# 
  1274  0211                     	;# 
  1275  0211                     	;# 
  1276  0212                     	;# 
  1277  0212                     	;# 
  1278  0213                     	;# 
  1279  0213                     	;# 
  1280  0214                     	;# 
  1281  0214                     	;# 
  1282  0215                     	;# 
  1283  0215                     	;# 
  1284  0215                     	;# 
  1285  0216                     	;# 
  1286  0216                     	;# 
  1287  0217                     	;# 
  1288  0217                     	;# 
  1289  0291                     	;# 
  1290  0291                     	;# 
  1291  0292                     	;# 
  1292  0293                     	;# 
  1293  0294                     	;# 
  1294  0295                     	;# 
  1295  0295                     	;# 
  1296  0296                     	;# 
  1297  0391                     	;# 
  1298  0392                     	;# 
  1299  0393                     	;# 
  1300  039A                     	;# 
  1301  039C                     	;# 
  1302  039D                     	;# 
  1303  039E                     	;# 
  1304  039F                     	;# 
  1305  0FE4                     	;# 
  1306  0FE5                     	;# 
  1307  0FE6                     	;# 
  1308  0FE7                     	;# 
  1309  0FE8                     	;# 
  1310  0FE9                     	;# 
  1311  0FEA                     	;# 
  1312  0FEB                     	;# 
  1313  0FED                     	;# 
  1314  0FEE                     	;# 
  1315  0FEF                     	;# 
  1316                           
  1317                           	psect	stringtext
  1318  0200                     __pstringtext:	
  1319  0200                     _CMD_SET_DIRECT:	
  1320  0200  3453               	retlw	83
  1321  0201  3465               	retlw	101
  1322  0202  3474               	retlw	116
  1323  0203  344C               	retlw	76
  1324  0204  3445               	retlw	69
  1325  0205  3444               	retlw	68
  1326  0206  3420               	retlw	32
  1327  0207  3444               	retlw	68
  1328  0208  3449               	retlw	73
  1329  0209  3452               	retlw	82
  1330  020A  3445               	retlw	69
  1331  020B  3443               	retlw	67
  1332  020C  3454               	retlw	84
  1333  020D  340D               	retlw	13
  1334  020E  340A               	retlw	10
  1335  020F  3400               	retlw	0
  1336  0210                     __end_of_CMD_SET_DIRECT:	
  1337  0210                     _CMD_SET_STARRY:	
  1338  0210  3453               	retlw	83
  1339  0211  3465               	retlw	101
  1340  0212  3474               	retlw	116
  1341  0213  344C               	retlw	76
  1342  0214  3445               	retlw	69
  1343  0215  3444               	retlw	68
  1344  0216  3420               	retlw	32
  1345  0217  3453               	retlw	83
  1346  0218  3454               	retlw	84
  1347  0219  3441               	retlw	65
  1348  021A  3452               	retlw	82
  1349  021B  3452               	retlw	82
  1350  021C  3459               	retlw	89
  1351  021D  340D               	retlw	13
  1352  021E  340A               	retlw	10
  1353  021F  3400               	retlw	0
  1354  0220                     __end_of_CMD_SET_STARRY:	
  1355  0220                     _CMD_SET_PARTY:	
  1356  0220  3453               	retlw	83
  1357  0221  3465               	retlw	101
  1358  0222  3474               	retlw	116
  1359  0223  344C               	retlw	76
  1360  0224  3445               	retlw	69
  1361  0225  3444               	retlw	68
  1362  0226  3420               	retlw	32
  1363  0227  3450               	retlw	80
  1364  0228  3441               	retlw	65
  1365  0229  3452               	retlw	82
  1366  022A  3454               	retlw	84
  1367  022B  3459               	retlw	89
  1368  022C  340D               	retlw	13
  1369  022D  340A               	retlw	10
  1370  022E  3400               	retlw	0
  1371  022F                     __end_of_CMD_SET_PARTY:	
  1372  022F                     _CMD_GET_STATE:	
  1373  022F  3447               	retlw	71
  1374  0230  3465               	retlw	101
  1375  0231  3474               	retlw	116
  1376  0232  344C               	retlw	76
  1377  0233  3445               	retlw	69
  1378  0234  3444               	retlw	68
  1379  0235  3453               	retlw	83
  1380  0236  3474               	retlw	116
  1381  0237  3461               	retlw	97
  1382  0238  3474               	retlw	116
  1383  0239  3465               	retlw	101
  1384  023A  340D               	retlw	13
  1385  023B  340A               	retlw	10
  1386  023C  3400               	retlw	0
  1387  023D                     __end_of_CMD_GET_STATE:	
  1388  023D                     _CMD_SET_XMAS:	
  1389  023D  3453               	retlw	83
  1390  023E  3465               	retlw	101
  1391  023F  3474               	retlw	116
  1392  0240  344C               	retlw	76
  1393  0241  3445               	retlw	69
  1394  0242  3444               	retlw	68
  1395  0243  3420               	retlw	32
  1396  0244  3458               	retlw	88
  1397  0245  344D               	retlw	77
  1398  0246  3441               	retlw	65
  1399  0247  3453               	retlw	83
  1400  0248  340D               	retlw	13
  1401  0249  340A               	retlw	10
  1402  024A  3400               	retlw	0
  1403  024B                     __end_of_CMD_SET_XMAS:	
  1404  024B                     _CMD_SET_OFF:	
  1405  024B  3453               	retlw	83
  1406  024C  3465               	retlw	101
  1407  024D  3474               	retlw	116
  1408  024E  344C               	retlw	76
  1409  024F  3445               	retlw	69
  1410  0250  3444               	retlw	68
  1411  0251  3420               	retlw	32
  1412  0252  344F               	retlw	79
  1413  0253  3466               	retlw	102
  1414  0254  3466               	retlw	102
  1415  0255  340D               	retlw	13
  1416  0256  340A               	retlw	10
  1417  0257  3400               	retlw	0
  1418  0258                     __end_of_CMD_SET_OFF:	
  1419  000B                     _INTCONbits	set	11
  1420  0011                     _PIR1bits	set	17
  1421  0012                     _PIR2bits	set	18
  1422  0018                     _T1CON	set	24
  1423  0018                     _T1CONbits	set	24
  1424  0019                     _T1GCON	set	25
  1425  0017                     _TMR1H	set	23
  1426  0016                     _TMR1L	set	22
  1427  005F                     _GIE	set	95
  1428  0095                     _OPTION_REGbits	set	149
  1429  0099                     _OSCCON	set	153
  1430  009A                     _OSCSTAT	set	154
  1431  0098                     _OSCTUNE	set	152
  1432  0091                     _PIE1bits	set	145
  1433  0092                     _PIE2bits	set	146
  1434  008C                     _TRISA	set	140
  1435  04D6                     _PLLR	set	1238
  1436  011D                     _APFCON	set	285
  1437  0111                     _CM1CON0	set	273
  1438  0112                     _CM1CON1	set	274
  1439  0117                     _FVRCON	set	279
  1440  010C                     _LATA	set	268
  1441  0862                     _LATA2	set	2146
  1442  018C                     _ANSELA	set	396
  1443  019F                     _BAUDCON	set	415
  1444  0199                     _RCREG	set	409
  1445  019D                     _RCSTA	set	413
  1446  019D                     _RCSTAbits	set	413
  1447  019C                     _SPBRGH	set	412
  1448  019B                     _SPBRGL	set	411
  1449  019A                     _TXREG	set	410
  1450  019E                     _TXSTA	set	414
  1451  020C                     _WPUA	set	524
  1452  0258                     __stringdata:	
  1453  0258                     STR_7:	
  1454  0258  3449               	retlw	73	;'I'
  1455  0259  346E               	retlw	110	;'n'
  1456  025A  3476               	retlw	118	;'v'
  1457  025B  3461               	retlw	97	;'a'
  1458  025C  346C               	retlw	108	;'l'
  1459  025D  3469               	retlw	105	;'i'
  1460  025E  3464               	retlw	100	;'d'
  1461  025F  3420               	retlw	32	;' '
  1462  0260  3443               	retlw	67	;'C'
  1463  0261  346F               	retlw	111	;'o'
  1464  0262  346D               	retlw	109	;'m'
  1465  0263  346D               	retlw	109	;'m'
  1466  0264  3461               	retlw	97	;'a'
  1467  0265  346E               	retlw	110	;'n'
  1468  0266  3464               	retlw	100	;'d'
  1469  0267  3420               	retlw	32	;' '
  1470  0268  340D               	retlw	13
  1471  0269  340A               	retlw	10
  1472  026A  3400               	retlw	0
  1473  026B                     STR_2:	
  1474  026B  3444               	retlw	68	;'D'
  1475  026C  3469               	retlw	105	;'i'
  1476  026D  3472               	retlw	114	;'r'
  1477  026E  3465               	retlw	101	;'e'
  1478  026F  3463               	retlw	99	;'c'
  1479  0270  3474               	retlw	116	;'t'
  1480  0271  3420               	retlw	32	;' '
  1481  0272  3463               	retlw	99	;'c'
  1482  0273  346F               	retlw	111	;'o'
  1483  0274  346C               	retlw	108	;'l'
  1484  0275  346F               	retlw	111	;'o'
  1485  0276  3472               	retlw	114	;'r'
  1486  0277  340D               	retlw	13
  1487  0278  340A               	retlw	10
  1488  0279  3400               	retlw	0
  1489  027A                     STR_1:	
  1490  027A  344C               	retlw	76	;'L'
  1491  027B  3445               	retlw	69	;'E'
  1492  027C  3444               	retlw	68	;'D'
  1493  027D  3420               	retlw	32	;' '
  1494  027E  3469               	retlw	105	;'i'
  1495  027F  3473               	retlw	115	;'s'
  1496  0280  3420               	retlw	32	;' '
  1497  0281  344F               	retlw	79	;'O'
  1498  0282  3446               	retlw	70	;'F'
  1499  0283  3446               	retlw	70	;'F'
  1500  0284  340D               	retlw	13
  1501  0285  340A               	retlw	10
  1502  0286  3400               	retlw	0
  1503  0287                     STR_3:	
  1504  0287  3453               	retlw	83	;'S'
  1505  0288  3474               	retlw	116	;'t'
  1506  0289  3461               	retlw	97	;'a'
  1507  028A  3472               	retlw	114	;'r'
  1508  028B  3472               	retlw	114	;'r'
  1509  028C  3479               	retlw	121	;'y'
  1510  028D  340D               	retlw	13
  1511  028E  340A               	retlw	10
  1512  028F  3400               	retlw	0
  1513  0290                     STR_8:	
  1514  0290  3444               	retlw	68	;'D'
  1515  0291  344F               	retlw	79	;'O'
  1516  0292  344E               	retlw	78	;'N'
  1517  0293  3445               	retlw	69	;'E'
  1518  0294  3421               	retlw	33	;'!'
  1519  0295  340D               	retlw	13
  1520  0296  340A               	retlw	10
  1521  0297  3400               	retlw	0
  1522  0298                     STR_6:	
  1523  0298  3445               	retlw	69	;'E'
  1524  0299  3452               	retlw	82	;'R'
  1525  029A  3452               	retlw	82	;'R'
  1526  029B  344F               	retlw	79	;'O'
  1527  029C  3452               	retlw	82	;'R'
  1528  029D  340D               	retlw	13
  1529  029E  340A               	retlw	10
  1530  029F  3400               	retlw	0
  1531  02A0                     STR_5:	
  1532  02A0  3450               	retlw	80	;'P'
  1533  02A1  3461               	retlw	97	;'a'
  1534  02A2  3472               	retlw	114	;'r'
  1535  02A3  3474               	retlw	116	;'t'
  1536  02A4  3479               	retlw	121	;'y'
  1537  02A5  340D               	retlw	13
  1538  02A6  340A               	retlw	10
  1539  02A7  3400               	retlw	0
  1540  02A8                     STR_4:	
  1541  02A8  3458               	retlw	88	;'X'
  1542  02A9  346D               	retlw	109	;'m'
  1543  02AA  3461               	retlw	97	;'a'
  1544  02AB  3473               	retlw	115	;'s'
  1545  02AC  340D               	retlw	13
  1546  02AD  340A               	retlw	10
  1547  02AE  3400               	retlw	0
  1548  02AF                     __end_of__stringdata:	
  1549                           
  1550                           ; #config settings
  1551  0000                     
  1552                           	psect	cinit
  1553  0028                     start_initialization:	
  1554  0028                     __initialization:	
  1555                           
  1556                           ; Clear objects allocated to BANK0
  1557  0028  3020               	movlw	low __pbssBANK0
  1558  0029  0084               	movwf	4
  1559  002A  3000               	movlw	high __pbssBANK0
  1560  002B  0085               	movwf	5
  1561  002C  303C               	movlw	60
  1562  002D  24E2               	fcall	clear_ram0
  1563  002E                     end_of_initialization:	
  1564                           ;End of C runtime variable initialization code
  1565                           
  1566  002E                     __end_of__initialization:	
  1567  002E  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  1568  002F  0020               	movlb	0
  1569  0030  2CC1               	ljmp	_main	;jump to C main() function
  1570                           
  1571                           	psect	bssBANK0
  1572  0020                     __pbssBANK0:	
  1573  0020                     _eusartRxBuffer:	
  1574  0020                     	ds	16
  1575  0030                     _eusartTxBuffer:	
  1576  0030                     	ds	8
  1577  0038                     _LED_color:	
  1578  0038                     	ds	3
  1579  003B                     _LED_currentColor:	
  1580  003B                     	ds	3
  1581  003E                     TMR1_ISR@CountCallBack:	
  1582  003E                     	ds	2
  1583  0040                     _timer1ReloadVal:	
  1584  0040                     	ds	2
  1585  0042                     COMM_Task@UART_ReceiveState:	
  1586  0042                     	ds	1
  1587  0043                     COMM_Task@receiveCounter:	
  1588  0043                     	ds	1
  1589  0044                     LED_Task@ledOFF:	
  1590  0044                     	ds	1
  1591  0045                     _LED_mode:	
  1592  0045                     	ds	1
  1593  0046                     _eusartRxCount:	
  1594  0046                     	ds	1
  1595  0047                     _eusartRxHead:	
  1596  0047                     	ds	1
  1597  0048                     _eusartRxTail:	
  1598  0048                     	ds	1
  1599  0049                     _eusartTxBufferRemaining:	
  1600  0049                     	ds	1
  1601  004A                     _eusartTxHead:	
  1602  004A                     	ds	1
  1603  004B                     _eusartTxTail:	
  1604  004B                     	ds	1
  1605  004C                     _inputCommand:	
  1606  004C                     	ds	16
  1607                           
  1608                           	psect	clrtext
  1609  04E2                     clear_ram0:	
  1610                           ;	Called with FSR0 containing the base address, and
  1611                           ;	WREG with the size to clear
  1612                           
  1613  04E2  0064               	clrwdt	;clear the watchdog before getting into this loop
  1614  04E3                     clrloop0:	
  1615  04E3  0180               	clrf	0	;clear RAM location pointed to by FSR
  1616  04E4  3101               	addfsr 0,1
  1617  04E5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1618  04E6  2CE3               	goto	clrloop0	;have we reached the end yet?
  1619  04E7  3400               	retlw	0	;all done for this memory range, return
  1620                           
  1621                           	psect	cstackCOMMON
  1622  0070                     __pcstackCOMMON:	
  1623  0070                     ?_OSCILLATOR_Initialize:	
  1624  0070                     ??_OSCILLATOR_Initialize:	
  1625                           ; 0 bytes @ 0x0
  1626                           
  1627  0070                     ?_PIN_MANAGER_Initialize:	
  1628                           ; 0 bytes @ 0x0
  1629                           
  1630  0070                     ??_PIN_MANAGER_Initialize:	
  1631                           ; 0 bytes @ 0x0
  1632                           
  1633  0070                     ?_EUSART_Initialize:	
  1634                           ; 0 bytes @ 0x0
  1635                           
  1636  0070                     ??_EUSART_Initialize:	
  1637                           ; 0 bytes @ 0x0
  1638                           
  1639  0070                     ?_CMP1_Initialize:	
  1640                           ; 0 bytes @ 0x0
  1641                           
  1642  0070                     ??_CMP1_Initialize:	
  1643                           ; 0 bytes @ 0x0
  1644                           
  1645  0070                     ?_FVR_Initialize:	
  1646                           ; 0 bytes @ 0x0
  1647                           
  1648  0070                     ??_FVR_Initialize:	
  1649                           ; 0 bytes @ 0x0
  1650                           
  1651  0070                     ?_TMR1_Initialize:	
  1652                           ; 0 bytes @ 0x0
  1653                           
  1654  0070                     ??_TMR1_Initialize:	
  1655                           ; 0 bytes @ 0x0
  1656                           
  1657  0070                     ?_TMR1_StartTimer:	
  1658                           ; 0 bytes @ 0x0
  1659                           
  1660  0070                     ??_TMR1_StartTimer:	
  1661                           ; 0 bytes @ 0x0
  1662                           
  1663  0070                     ?_TMR1_CallBack:	
  1664                           ; 0 bytes @ 0x0
  1665                           
  1666  0070                     ??_TMR1_CallBack:	
  1667                           ; 0 bytes @ 0x0
  1668                           
  1669  0070                     ?_EUSART_Receive_ISR:	
  1670                           ; 0 bytes @ 0x0
  1671                           
  1672  0070                     ??_EUSART_Receive_ISR:	
  1673                           ; 0 bytes @ 0x0
  1674                           
  1675  0070                     ?_EUSART_Transmit_ISR:	
  1676                           ; 0 bytes @ 0x0
  1677                           
  1678  0070                     ??_EUSART_Transmit_ISR:	
  1679                           ; 0 bytes @ 0x0
  1680                           
  1681  0070                     ?_CMP1_ISR:	
  1682                           ; 0 bytes @ 0x0
  1683                           
  1684  0070                     ??_CMP1_ISR:	
  1685                           ; 0 bytes @ 0x0
  1686                           
  1687  0070                     ?_ledSendByte:	
  1688                           ; 0 bytes @ 0x0
  1689                           
  1690  0070                     ??_ledSendByte:	
  1691                           ; 0 bytes @ 0x0
  1692                           
  1693  0070                     ?_COMM_Task:	
  1694                           ; 0 bytes @ 0x0
  1695                           
  1696  0070                     ?_SYSTEM_Initialize:	
  1697                           ; 0 bytes @ 0x0
  1698                           
  1699  0070                     ??_SYSTEM_Initialize:	
  1700                           ; 0 bytes @ 0x0
  1701                           
  1702  0070                     ?_TMR1_ISR:	
  1703                           ; 0 bytes @ 0x0
  1704                           
  1705  0070                     ??_TMR1_ISR:	
  1706                           ; 0 bytes @ 0x0
  1707                           
  1708  0070                     ?_INTERRUPT_InterruptManager:	
  1709                           ; 0 bytes @ 0x0
  1710                           
  1711  0070                     ??_INTERRUPT_InterruptManager:	
  1712                           ; 0 bytes @ 0x0
  1713                           
  1714  0070                     ??_EUSART_Read:	
  1715                           ; 0 bytes @ 0x0
  1716                           
  1717  0070                     ?_EUSART_Write:	
  1718                           ; 0 bytes @ 0x0
  1719                           
  1720  0070                     ??_EUSART_Write:	
  1721                           ; 0 bytes @ 0x0
  1722                           
  1723  0070                     ?_LED_Test:	
  1724                           ; 0 bytes @ 0x0
  1725                           
  1726  0070                     ?_LED_Task:	
  1727                           ; 0 bytes @ 0x0
  1728                           
  1729  0070                     ?_main:	
  1730                           ; 0 bytes @ 0x0
  1731                           
  1732  0070                     ??_UART_HexSrtingToBinary:	
  1733                           ; 0 bytes @ 0x0
  1734                           
  1735  0070                     ?_memset:	
  1736                           ; 0 bytes @ 0x0
  1737                           
  1738  0070                     ?_EUSART_Read:	
  1739                           ; 1 bytes @ 0x0
  1740                           
  1741  0070                     ?_UART_HexSrtingToBinary:	
  1742                           ; 1 bytes @ 0x0
  1743                           
  1744  0070                     ?_strlen:	
  1745                           ; 1 bytes @ 0x0
  1746                           
  1747  0070                     ?_strcmp:	
  1748                           ; 2 bytes @ 0x0
  1749                           
  1750  0070                     EUSART_Read@readValue:	
  1751                           ; 2 bytes @ 0x0
  1752                           
  1753  0070                     EUSART_Write@txData:	
  1754                           ; 1 bytes @ 0x0
  1755                           
  1756  0070                     ledSendByte@data:	
  1757                           ; 1 bytes @ 0x0
  1758                           
  1759  0070                     memset@c:	
  1760                           ; 1 bytes @ 0x0
  1761                           
  1762  0070                     strcmp@s1:	
  1763                           ; 2 bytes @ 0x0
  1764                           
  1765  0070                     strlen@s:	
  1766                           ; 2 bytes @ 0x0
  1767                           
  1768                           
  1769                           ; 2 bytes @ 0x0
  1770  0070                     	ds	1
  1771  0071                     ledSendByte@i:	
  1772                           
  1773                           ; 1 bytes @ 0x1
  1774  0071                     	ds	1
  1775  0072                     ??_strlen:	
  1776  0072                     ??_LED_Test:	
  1777                           ; 0 bytes @ 0x2
  1778                           
  1779  0072                     ??_LED_Task:	
  1780                           ; 0 bytes @ 0x2
  1781                           
  1782  0072                     UART_HexSrtingToBinary@i:	
  1783                           ; 0 bytes @ 0x2
  1784                           
  1785  0072                     strcmp@s2:	
  1786                           ; 1 bytes @ 0x2
  1787                           
  1788  0072                     LED_Task@i:	
  1789                           ; 1 bytes @ 0x2
  1790                           
  1791  0072                     memset@n:	
  1792                           ; 2 bytes @ 0x2
  1793                           
  1794  0072                     strlen@cp:	
  1795                           ; 2 bytes @ 0x2
  1796                           
  1797                           
  1798                           ; 2 bytes @ 0x2
  1799  0072                     	ds	1
  1800  0073                     ??_strcmp:	
  1801  0073                     UART_HexSrtingToBinary@data:	
  1802                           ; 0 bytes @ 0x3
  1803                           
  1804  0073                     strcmp@t0:	
  1805                           ; 1 bytes @ 0x3
  1806                           
  1807                           
  1808                           ; 1 bytes @ 0x3
  1809  0073                     	ds	1
  1810  0074                     ??_memset:	
  1811  0074                     ?_outputString:	
  1812                           ; 0 bytes @ 0x4
  1813                           
  1814  0074                     memset@p1:	
  1815                           ; 0 bytes @ 0x4
  1816                           
  1817  0074                     strcmp@t2:	
  1818                           ; 1 bytes @ 0x4
  1819                           
  1820  0074                     LED_Task@i_649:	
  1821                           ; 1 bytes @ 0x4
  1822                           
  1823  0074                     outputString@string:	
  1824                           ; 2 bytes @ 0x4
  1825                           
  1826                           
  1827                           ; 2 bytes @ 0x4
  1828  0074                     	ds	1
  1829  0075                     memset@p:	
  1830  0075                     strcmp@t1:	
  1831                           ; 1 bytes @ 0x5
  1832                           
  1833  0075                     LED_Test@j:	
  1834                           ; 1 bytes @ 0x5
  1835                           
  1836                           
  1837                           ; 2 bytes @ 0x5
  1838  0075                     	ds	1
  1839  0076                     ??_outputString:	
  1840  0076                     LED_Task@i_650:	
  1841                           ; 0 bytes @ 0x6
  1842                           
  1843                           
  1844                           ; 1 bytes @ 0x6
  1845  0076                     	ds	1
  1846  0077                     LED_Test@i:	
  1847                           
  1848                           ; 1 bytes @ 0x7
  1849  0077                     	ds	1
  1850  0078                     outputString@i:	
  1851                           
  1852                           ; 1 bytes @ 0x8
  1853  0078                     	ds	1
  1854  0079                     ??_COMM_Task:	
  1855  0079                     COMM_Task@r:	
  1856                           ; 0 bytes @ 0x9
  1857                           
  1858                           
  1859                           ; 1 bytes @ 0x9
  1860  0079                     	ds	1
  1861  007A                     COMM_Task@g:	
  1862                           
  1863                           ; 1 bytes @ 0xA
  1864  007A                     	ds	1
  1865  007B                     COMM_Task@b:	
  1866                           
  1867                           ; 1 bytes @ 0xB
  1868  007B                     	ds	1
  1869  007C                     COMM_Task@receiveData:	
  1870                           
  1871                           ; 1 bytes @ 0xC
  1872  007C                     	ds	1
  1873  007D                     ??_main:	
  1874                           
  1875                           ; 0 bytes @ 0xD
  1876  007D                     	ds	1
  1877                           
  1878                           	psect	maintext
  1879  04C1                     __pmaintext:	
  1880 ;;
  1881 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1882 ;;
  1883 ;; *************** function _main *****************
  1884 ;; Defined at:
  1885 ;;		line 56 in file "../src/main.c"
  1886 ;; Parameters:    Size  Location     Type
  1887 ;;		None
  1888 ;; Auto vars:     Size  Location     Type
  1889 ;;		None
  1890 ;; Return value:  Size  Location     Type
  1891 ;;		None               void
  1892 ;; Registers used:
  1893 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1894 ;; Tracked objects:
  1895 ;;		On entry : 17F/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMMON   BANK0   BANK1
  1899 ;;      Params:         0       0       0
  1900 ;;      Locals:         0       0       0
  1901 ;;      Temps:          1       0       0
  1902 ;;      Totals:         1       0       0
  1903 ;;Total ram usage:        1 bytes
  1904 ;; Hardware stack levels required when called:    6
  1905 ;; This function calls:
  1906 ;;		_COMM_Task
  1907 ;;		_LED_Task
  1908 ;;		_LED_Test
  1909 ;;		_SYSTEM_Initialize
  1910 ;; This function is called by:
  1911 ;;		Startup code after reset
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           
  1916                           ;psect for function _main
  1917  04C1                     _main:	
  1918                           
  1919                           ;main.c: 59: SYSTEM_Initialize();
  1920                           
  1921                           ;incstack = 0
  1922                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1923  04C1  24E8               	fcall	_SYSTEM_Initialize
  1924                           
  1925                           ;main.c: 62: (INTCONbits.GIE = 1);
  1926  04C2  178B               	bsf	11,7	;volatile
  1927                           
  1928                           ;main.c: 65: (INTCONbits.PEIE = 1);
  1929  04C3  170B               	bsf	11,6	;volatile
  1930                           
  1931                           ;main.c: 68: LED_Test();
  1932  04C4  2383               	fcall	_LED_Test
  1933  04C5                     l2015:	
  1934                           
  1935                           ;main.c: 71: {
  1936                           ;main.c: 72: COMM_Task();
  1937  04C5  2031               	fcall	_COMM_Task
  1938                           
  1939                           ;main.c: 73: LED_Task();
  1940  04C6  22AF               	fcall	_LED_Task
  1941                           
  1942                           ;main.c: 74: _delay((unsigned long)((100)*(32000000/4000000.0)));
  1943  04C7  30C7               	movlw	199
  1944  04C8  00FD               	movwf	??_main
  1945  04C9                     u1227:	
  1946  04C9  0000               	nop
  1947  04CA  0BFD               	decfsz	??_main,f
  1948  04CB  2CC9               	goto	u1227
  1949  04CC  3200               	nop2	;nop
  1950  04CD  0000               	nop
  1951  04CE  2CC5               	goto	l2015
  1952  04CF                     __end_of_main:	
  1953                           
  1954                           	psect	text1
  1955  04E8                     __ptext1:	
  1956 ;; *************** function _SYSTEM_Initialize *****************
  1957 ;; Defined at:
  1958 ;;		line 70 in file "../src/mcc_generated_files/mcc.c"
  1959 ;; Parameters:    Size  Location     Type
  1960 ;;		None
  1961 ;; Auto vars:     Size  Location     Type
  1962 ;;		None
  1963 ;; Return value:  Size  Location     Type
  1964 ;;		None               void
  1965 ;; Registers used:
  1966 ;;		wreg, status,2, status,0, pclath, cstack
  1967 ;; Tracked objects:
  1968 ;;		On entry : 17F/0
  1969 ;;		On exit  : 17F/0
  1970 ;;		Unchanged: 160/0
  1971 ;; Data sizes:     COMMON   BANK0   BANK1
  1972 ;;      Params:         0       0       0
  1973 ;;      Locals:         0       0       0
  1974 ;;      Temps:          0       0       0
  1975 ;;      Totals:         0       0       0
  1976 ;;Total ram usage:        0 bytes
  1977 ;; Hardware stack levels used:    1
  1978 ;; Hardware stack levels required when called:    5
  1979 ;; This function calls:
  1980 ;;		_CMP1_Initialize
  1981 ;;		_EUSART_Initialize
  1982 ;;		_FVR_Initialize
  1983 ;;		_OSCILLATOR_Initialize
  1984 ;;		_PIN_MANAGER_Initialize
  1985 ;;		_TMR1_Initialize
  1986 ;; This function is called by:
  1987 ;;		_main
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           
  1992                           ;psect for function _SYSTEM_Initialize
  1993  04E8                     _SYSTEM_Initialize:	
  1994                           
  1995                           ;mcc.c: 72: OSCILLATOR_Initialize();
  1996                           
  1997                           ;incstack = 0
  1998                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1999  04E8  24DA               	fcall	_OSCILLATOR_Initialize
  2000                           
  2001                           ;mcc.c: 73: PIN_MANAGER_Initialize();
  2002  04E9  24B1               	fcall	_PIN_MANAGER_Initialize
  2003                           
  2004                           ;mcc.c: 74: EUSART_Initialize();
  2005  04EA  23F6               	fcall	_EUSART_Initialize
  2006                           
  2007                           ;mcc.c: 75: CMP1_Initialize();
  2008  04EB  24CF               	fcall	_CMP1_Initialize
  2009                           
  2010                           ;mcc.c: 76: FVR_Initialize();
  2011  04EC  24EE               	fcall	_FVR_Initialize
  2012                           
  2013                           ;mcc.c: 77: TMR1_Initialize();
  2014  04ED  2CA0               	ljmp	l1589
  2015  04EE                     __end_of_SYSTEM_Initialize:	
  2016                           
  2017                           	psect	text2
  2018  04A0                     __ptext2:	
  2019 ;; *************** function _TMR1_Initialize *****************
  2020 ;; Defined at:
  2021 ;;		line 63 in file "../src/mcc_generated_files/tmr1.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;		None
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;		None
  2026 ;; Return value:  Size  Location     Type
  2027 ;;		None               void
  2028 ;; Registers used:
  2029 ;;		wreg, status,2, status,0, pclath, cstack
  2030 ;; Tracked objects:
  2031 ;;		On entry : 17F/2
  2032 ;;		On exit  : 17F/0
  2033 ;;		Unchanged: 160/0
  2034 ;; Data sizes:     COMMON   BANK0   BANK1
  2035 ;;      Params:         0       0       0
  2036 ;;      Locals:         0       0       0
  2037 ;;      Temps:          0       0       0
  2038 ;;      Totals:         0       0       0
  2039 ;;Total ram usage:        0 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    4
  2042 ;; This function calls:
  2043 ;;		_TMR1_StartTimer
  2044 ;; This function is called by:
  2045 ;;		_SYSTEM_Initialize
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           
  2050                           ;psect for function _TMR1_Initialize
  2051  04A0                     _TMR1_Initialize:	
  2052  04A0                     l1589:	
  2053                           ;incstack = 0
  2054                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2055                           
  2056                           
  2057                           ;tmr1.c: 68: T1CON = 0x34;
  2058  04A0  3034               	movlw	52
  2059  04A1  0020               	movlb	0	; select bank0
  2060  04A2  0098               	movwf	24	;volatile
  2061                           
  2062                           ;tmr1.c: 71: T1GCON = 0x00;
  2063  04A3  0199               	clrf	25	;volatile
  2064                           
  2065                           ;tmr1.c: 74: TMR1H = 0x0B;
  2066  04A4  300B               	movlw	11
  2067  04A5  0097               	movwf	23	;volatile
  2068                           
  2069                           ;tmr1.c: 77: TMR1L = 0xDC;
  2070  04A6  30DC               	movlw	220
  2071  04A7  0096               	movwf	22	;volatile
  2072                           
  2073                           ;tmr1.c: 80: timer1ReloadVal=(TMR1H << 8) | TMR1L;
  2074  04A8  0817               	movf	23,w	;volatile
  2075  04A9  00C1               	movwf	_timer1ReloadVal+1	;volatile
  2076  04AA  01C0               	clrf	_timer1ReloadVal	;volatile
  2077  04AB  0816               	movf	22,w	;volatile
  2078  04AC  04C0               	iorwf	_timer1ReloadVal,f	;volatile
  2079                           
  2080                           ;tmr1.c: 83: PIR1bits.TMR1IF = 0;
  2081  04AD  1011               	bcf	17,0	;volatile
  2082                           
  2083                           ;tmr1.c: 86: PIE1bits.TMR1IE = 1;
  2084  04AE  0021               	movlb	1	; select bank1
  2085  04AF  1411               	bsf	17,0	;volatile
  2086                           
  2087                           ;tmr1.c: 89: TMR1_StartTimer();
  2088  04B0  2CF2               	ljmp	l1547
  2089  04B1                     __end_of_TMR1_Initialize:	
  2090                           
  2091                           	psect	text3
  2092  04F2                     __ptext3:	
  2093 ;; *************** function _TMR1_StartTimer *****************
  2094 ;; Defined at:
  2095 ;;		line 92 in file "../src/mcc_generated_files/tmr1.c"
  2096 ;; Parameters:    Size  Location     Type
  2097 ;;		None
  2098 ;; Auto vars:     Size  Location     Type
  2099 ;;		None
  2100 ;; Return value:  Size  Location     Type
  2101 ;;		None               void
  2102 ;; Registers used:
  2103 ;;		None
  2104 ;; Tracked objects:
  2105 ;;		On entry : 17F/1
  2106 ;;		On exit  : 17F/0
  2107 ;;		Unchanged: 160/0
  2108 ;; Data sizes:     COMMON   BANK0   BANK1
  2109 ;;      Params:         0       0       0
  2110 ;;      Locals:         0       0       0
  2111 ;;      Temps:          0       0       0
  2112 ;;      Totals:         0       0       0
  2113 ;;Total ram usage:        0 bytes
  2114 ;; Hardware stack levels used:    1
  2115 ;; Hardware stack levels required when called:    3
  2116 ;; This function calls:
  2117 ;;		Nothing
  2118 ;; This function is called by:
  2119 ;;		_TMR1_Initialize
  2120 ;; This function uses a non-reentrant model
  2121 ;;
  2122                           
  2123                           
  2124                           ;psect for function _TMR1_StartTimer
  2125  04F2                     _TMR1_StartTimer:	
  2126  04F2                     l1547:	
  2127                           ;incstack = 0
  2128                           ; Regs used in _TMR1_StartTimer: []
  2129                           
  2130                           
  2131                           ;tmr1.c: 95: T1CONbits.TMR1ON = 1;
  2132  04F2  0020               	movlb	0	; select bank0
  2133  04F3  1418               	bsf	24,0	;volatile
  2134  04F4  0008               	return
  2135  04F5                     __end_of_TMR1_StartTimer:	
  2136                           
  2137                           	psect	text4
  2138  04B1                     __ptext4:	
  2139 ;; *************** function _PIN_MANAGER_Initialize *****************
  2140 ;; Defined at:
  2141 ;;		line 50 in file "../src/mcc_generated_files/pin_manager.c"
  2142 ;; Parameters:    Size  Location     Type
  2143 ;;		None
  2144 ;; Auto vars:     Size  Location     Type
  2145 ;;		None
  2146 ;; Return value:  Size  Location     Type
  2147 ;;		None               void
  2148 ;; Registers used:
  2149 ;;		wreg, status,2
  2150 ;; Tracked objects:
  2151 ;;		On entry : 17F/1
  2152 ;;		On exit  : 17F/2
  2153 ;;		Unchanged: 160/0
  2154 ;; Data sizes:     COMMON   BANK0   BANK1
  2155 ;;      Params:         0       0       0
  2156 ;;      Locals:         0       0       0
  2157 ;;      Temps:          0       0       0
  2158 ;;      Totals:         0       0       0
  2159 ;;Total ram usage:        0 bytes
  2160 ;; Hardware stack levels used:    1
  2161 ;; Hardware stack levels required when called:    3
  2162 ;; This function calls:
  2163 ;;		Nothing
  2164 ;; This function is called by:
  2165 ;;		_SYSTEM_Initialize
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           
  2170                           ;psect for function _PIN_MANAGER_Initialize
  2171  04B1                     _PIN_MANAGER_Initialize:	
  2172                           
  2173                           ;pin_manager.c: 52: LATA = 0x04;
  2174                           
  2175                           ;incstack = 0
  2176                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2177  04B1  3004               	movlw	4
  2178  04B2  0022               	movlb	2	; select bank2
  2179  04B3  008C               	movwf	12	;volatile
  2180                           
  2181                           ;pin_manager.c: 53: TRISA = 0x3B;
  2182  04B4  303B               	movlw	59
  2183  04B5  0021               	movlb	1	; select bank1
  2184  04B6  008C               	movwf	12	;volatile
  2185                           
  2186                           ;pin_manager.c: 54: ANSELA = 0x10;
  2187  04B7  3010               	movlw	16
  2188  04B8  0023               	movlb	3	; select bank3
  2189  04B9  008C               	movwf	12	;volatile
  2190                           
  2191                           ;pin_manager.c: 55: WPUA = 0x00;
  2192  04BA  0024               	movlb	4	; select bank4
  2193  04BB  018C               	clrf	12	;volatile
  2194                           
  2195                           ;pin_manager.c: 57: OPTION_REGbits.nWPUEN = 0x01;
  2196  04BC  0021               	movlb	1	; select bank1
  2197  04BD  1795               	bsf	21,7	;volatile
  2198                           
  2199                           ;pin_manager.c: 59: APFCON = 0x00;
  2200  04BE  0022               	movlb	2	; select bank2
  2201  04BF  019D               	clrf	29	;volatile
  2202  04C0  0008               	return
  2203  04C1                     __end_of_PIN_MANAGER_Initialize:	
  2204                           
  2205                           	psect	text5
  2206  04DA                     __ptext5:	
  2207 ;; *************** function _OSCILLATOR_Initialize *****************
  2208 ;; Defined at:
  2209 ;;		line 80 in file "../src/mcc_generated_files/mcc.c"
  2210 ;; Parameters:    Size  Location     Type
  2211 ;;		None
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;		None
  2214 ;; Return value:  Size  Location     Type
  2215 ;;		None               void
  2216 ;; Registers used:
  2217 ;;		wreg, status,2
  2218 ;; Tracked objects:
  2219 ;;		On entry : 17F/0
  2220 ;;		On exit  : 17F/1
  2221 ;;		Unchanged: 160/0
  2222 ;; Data sizes:     COMMON   BANK0   BANK1
  2223 ;;      Params:         0       0       0
  2224 ;;      Locals:         0       0       0
  2225 ;;      Temps:          0       0       0
  2226 ;;      Totals:         0       0       0
  2227 ;;Total ram usage:        0 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    3
  2230 ;; This function calls:
  2231 ;;		Nothing
  2232 ;; This function is called by:
  2233 ;;		_SYSTEM_Initialize
  2234 ;; This function uses a non-reentrant model
  2235 ;;
  2236                           
  2237                           
  2238                           ;psect for function _OSCILLATOR_Initialize
  2239  04DA                     _OSCILLATOR_Initialize:	
  2240                           
  2241                           ;mcc.c: 83: OSCCON = 0x70;
  2242                           
  2243                           ;incstack = 0
  2244                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2245  04DA  3070               	movlw	112
  2246  04DB  0021               	movlb	1	; select bank1
  2247  04DC  0099               	movwf	25	;volatile
  2248                           
  2249                           ;mcc.c: 85: OSCSTAT = 0x00;
  2250  04DD  019A               	clrf	26	;volatile
  2251                           
  2252                           ;mcc.c: 87: OSCTUNE = 0x00;
  2253  04DE  0198               	clrf	24	;volatile
  2254  04DF                     l26:	
  2255                           ;mcc.c: 92: {
  2256                           
  2257  04DF  1B1A               	btfsc	26,6	;volatile
  2258  04E0  0008               	return
  2259  04E1  2CDF               	goto	l26
  2260  04E2                     __end_of_OSCILLATOR_Initialize:	
  2261                           
  2262                           	psect	text6
  2263  04EE                     __ptext6:	
  2264 ;; *************** function _FVR_Initialize *****************
  2265 ;; Defined at:
  2266 ;;		line 58 in file "../src/mcc_generated_files/fvr.c"
  2267 ;; Parameters:    Size  Location     Type
  2268 ;;		None
  2269 ;; Auto vars:     Size  Location     Type
  2270 ;;		None
  2271 ;; Return value:  Size  Location     Type
  2272 ;;		None               void
  2273 ;; Registers used:
  2274 ;;		wreg
  2275 ;; Tracked objects:
  2276 ;;		On entry : 17F/1
  2277 ;;		On exit  : 17F/2
  2278 ;;		Unchanged: 160/0
  2279 ;; Data sizes:     COMMON   BANK0   BANK1
  2280 ;;      Params:         0       0       0
  2281 ;;      Locals:         0       0       0
  2282 ;;      Temps:          0       0       0
  2283 ;;      Totals:         0       0       0
  2284 ;;Total ram usage:        0 bytes
  2285 ;; Hardware stack levels used:    1
  2286 ;; Hardware stack levels required when called:    3
  2287 ;; This function calls:
  2288 ;;		Nothing
  2289 ;; This function is called by:
  2290 ;;		_SYSTEM_Initialize
  2291 ;; This function uses a non-reentrant model
  2292 ;;
  2293                           
  2294                           
  2295                           ;psect for function _FVR_Initialize
  2296  04EE                     _FVR_Initialize:	
  2297                           
  2298                           ;fvr.c: 61: FVRCON = 0x88;
  2299                           
  2300                           ;incstack = 0
  2301                           ; Regs used in _FVR_Initialize: [wreg]
  2302  04EE  3088               	movlw	136
  2303  04EF  0022               	movlb	2	; select bank2
  2304  04F0  0097               	movwf	23	;volatile
  2305  04F1  0008               	return
  2306  04F2                     __end_of_FVR_Initialize:	
  2307                           
  2308                           	psect	text7
  2309  03F6                     __ptext7:	
  2310 ;; *************** function _EUSART_Initialize *****************
  2311 ;; Defined at:
  2312 ;;		line 81 in file "../src/mcc_generated_files/eusart.c"
  2313 ;; Parameters:    Size  Location     Type
  2314 ;;		None
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;		None
  2317 ;; Return value:  Size  Location     Type
  2318 ;;		None               void
  2319 ;; Registers used:
  2320 ;;		wreg, status,2
  2321 ;; Tracked objects:
  2322 ;;		On entry : 17F/2
  2323 ;;		On exit  : 17F/1
  2324 ;;		Unchanged: 160/0
  2325 ;; Data sizes:     COMMON   BANK0   BANK1
  2326 ;;      Params:         0       0       0
  2327 ;;      Locals:         0       0       0
  2328 ;;      Temps:          0       0       0
  2329 ;;      Totals:         0       0       0
  2330 ;;Total ram usage:        0 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; Hardware stack levels required when called:    3
  2333 ;; This function calls:
  2334 ;;		Nothing
  2335 ;; This function is called by:
  2336 ;;		_SYSTEM_Initialize
  2337 ;; This function uses a non-reentrant model
  2338 ;;
  2339                           
  2340                           
  2341                           ;psect for function _EUSART_Initialize
  2342  03F6                     _EUSART_Initialize:	
  2343                           
  2344                           ;eusart.c: 84: PIE1bits.RCIE = 0;
  2345                           
  2346                           ;incstack = 0
  2347                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  2348  03F6  0021               	movlb	1	; select bank1
  2349  03F7  1291               	bcf	17,5	;volatile
  2350                           
  2351                           ;eusart.c: 85: PIE1bits.TXIE = 0;
  2352  03F8  1211               	bcf	17,4	;volatile
  2353                           
  2354                           ;eusart.c: 90: BAUDCON = 0x48;
  2355  03F9  3048               	movlw	72
  2356  03FA  0023               	movlb	3	; select bank3
  2357  03FB  009F               	movwf	31	;volatile
  2358                           
  2359                           ;eusart.c: 93: RCSTA = 0x90;
  2360  03FC  3090               	movlw	144
  2361  03FD  009D               	movwf	29	;volatile
  2362                           
  2363                           ;eusart.c: 96: TXSTA = 0x26;
  2364  03FE  3026               	movlw	38
  2365  03FF  009E               	movwf	30	;volatile
  2366                           
  2367                           ;eusart.c: 99: SPBRGL = 0x44;
  2368  0400  3044               	movlw	68
  2369  0401  009B               	movwf	27	;volatile
  2370                           
  2371                           ;eusart.c: 102: SPBRGH = 0x00;
  2372  0402  019C               	clrf	28	;volatile
  2373                           
  2374                           ;eusart.c: 106: eusartTxHead = 0;
  2375  0403  0020               	movlb	0	; select bank0
  2376  0404  3008               	movlw	8
  2377  0405  01CA               	clrf	_eusartTxHead
  2378                           
  2379                           ;eusart.c: 107: eusartTxTail = 0;
  2380  0406  01CB               	clrf	_eusartTxTail
  2381                           
  2382                           ;eusart.c: 108: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  2383  0407  00C9               	movwf	_eusartTxBufferRemaining	;volatile
  2384                           
  2385                           ;eusart.c: 110: eusartRxHead = 0;
  2386  0408  01C7               	clrf	_eusartRxHead
  2387                           
  2388                           ;eusart.c: 111: eusartRxTail = 0;
  2389  0409  01C8               	clrf	_eusartRxTail
  2390                           
  2391                           ;eusart.c: 112: eusartRxCount = 0;
  2392  040A  01C6               	clrf	_eusartRxCount	;volatile
  2393                           
  2394                           ;eusart.c: 115: PIE1bits.RCIE = 1;
  2395  040B  0021               	movlb	1	; select bank1
  2396  040C  1691               	bsf	17,5	;volatile
  2397  040D  0008               	return
  2398  040E                     __end_of_EUSART_Initialize:	
  2399                           
  2400                           	psect	text8
  2401  04CF                     __ptext8:	
  2402 ;; *************** function _CMP1_Initialize *****************
  2403 ;; Defined at:
  2404 ;;		line 58 in file "../src/mcc_generated_files/cmp1.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;		None
  2409 ;; Return value:  Size  Location     Type
  2410 ;;		None               void
  2411 ;; Registers used:
  2412 ;;		wreg
  2413 ;; Tracked objects:
  2414 ;;		On entry : 17F/1
  2415 ;;		On exit  : 17F/1
  2416 ;;		Unchanged: 160/0
  2417 ;; Data sizes:     COMMON   BANK0   BANK1
  2418 ;;      Params:         0       0       0
  2419 ;;      Locals:         0       0       0
  2420 ;;      Temps:          0       0       0
  2421 ;;      Totals:         0       0       0
  2422 ;;Total ram usage:        0 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    3
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_SYSTEM_Initialize
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           
  2433                           ;psect for function _CMP1_Initialize
  2434  04CF                     _CMP1_Initialize:	
  2435                           
  2436                           ;cmp1.c: 66: PIE2bits.C1IE = 0;
  2437                           
  2438                           ;incstack = 0
  2439                           ; Regs used in _CMP1_Initialize: [wreg]
  2440  04CF  1292               	bcf	18,5	;volatile
  2441                           
  2442                           ;cmp1.c: 70: CM1CON0 = 0x84;
  2443  04D0  3084               	movlw	132
  2444  04D1  0022               	movlb	2	; select bank2
  2445  04D2  0091               	movwf	17	;volatile
  2446                           
  2447                           ;cmp1.c: 73: CM1CON1 = 0x21;
  2448  04D3  3021               	movlw	33
  2449  04D4  0092               	movwf	18	;volatile
  2450                           
  2451                           ;cmp1.c: 77: PIR2bits.C1IF = 0;
  2452  04D5  0020               	movlb	0	; select bank0
  2453  04D6  1292               	bcf	18,5	;volatile
  2454                           
  2455                           ;cmp1.c: 80: PIE2bits.C1IE = 1;
  2456  04D7  0021               	movlb	1	; select bank1
  2457  04D8  1692               	bsf	18,5	;volatile
  2458  04D9  0008               	return
  2459  04DA                     __end_of_CMP1_Initialize:	
  2460                           
  2461                           	psect	text9
  2462  0383                     __ptext9:	
  2463 ;; *************** function _LED_Test *****************
  2464 ;; Defined at:
  2465 ;;		line 10 in file "../src/LED.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;		None
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  j               2    5[COMMON] unsigned int 
  2470 ;;  i               1    7[COMMON] unsigned char 
  2471 ;; Return value:  Size  Location     Type
  2472 ;;		None               void
  2473 ;; Registers used:
  2474 ;;		wreg, status,2, status,0, pclath, cstack
  2475 ;; Tracked objects:
  2476 ;;		On entry : 1F/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMMON   BANK0   BANK1
  2480 ;;      Params:         0       0       0
  2481 ;;      Locals:         3       0       0
  2482 ;;      Temps:          3       0       0
  2483 ;;      Totals:         6       0       0
  2484 ;;Total ram usage:        6 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    4
  2487 ;; This function calls:
  2488 ;;		_ledSendByte
  2489 ;; This function is called by:
  2490 ;;		_main
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           
  2495                           ;psect for function _LED_Test
  2496  0383                     _LED_Test:	
  2497                           
  2498                           ;LED.c: 12: for(uint8_t i=0; i<20+1; i++)
  2499                           
  2500                           ;incstack = 0
  2501                           ; Regs used in _LED_Test: [wreg+status,2+status,0+pclath+cstack]
  2502  0383  01F7               	clrf	LED_Test@i
  2503  0384                     l1755:	
  2504                           
  2505                           ;LED.c: 13: {
  2506                           ;LED.c: 14: for(uint16_t j=0;j<20;j++)
  2507  0384  01F5               	clrf	LED_Test@j
  2508  0385  01F6               	clrf	LED_Test@j+1
  2509  0386                     l1761:	
  2510                           
  2511                           ;LED.c: 15: {
  2512                           ;LED.c: 16: if(j==i)
  2513  0386  0877               	movf	LED_Test@i,w
  2514  0387  00F2               	movwf	??_LED_Test
  2515  0388  01F3               	clrf	??_LED_Test+1
  2516  0389  0876               	movf	LED_Test@j+1,w
  2517  038A  0673               	xorwf	??_LED_Test+1,w
  2518  038B  1D03               	skipz
  2519  038C  2B8F               	goto	u845
  2520  038D  0875               	movf	LED_Test@j,w
  2521  038E  0672               	xorwf	??_LED_Test,w
  2522  038F                     u845:	
  2523  038F  1D03               	skipz
  2524  0390  2B97               	goto	l1765
  2525                           
  2526                           ;LED.c: 17: {
  2527                           ;LED.c: 18: ledSendByte(255);
  2528  0391  30FF               	movlw	255
  2529  0392  2451               	fcall	_ledSendByte
  2530                           
  2531                           ;LED.c: 19: ledSendByte(255);
  2532  0393  30FF               	movlw	255
  2533  0394  2451               	fcall	_ledSendByte
  2534                           
  2535                           ;LED.c: 20: ledSendByte(255);
  2536  0395  30FF               	movlw	255
  2537  0396  2B9C               	goto	L1
  2538  0397                     l1765:	
  2539                           ;LED.c: 21: }
  2540                           
  2541                           
  2542                           ;LED.c: 22: else
  2543                           ;LED.c: 23: {
  2544                           ;LED.c: 24: ledSendByte(0);
  2545  0397  3000               	movlw	0
  2546  0398  2451               	fcall	_ledSendByte
  2547                           
  2548                           ;LED.c: 25: ledSendByte(0);
  2549  0399  3000               	movlw	0
  2550  039A  2451               	fcall	_ledSendByte
  2551                           
  2552                           ;LED.c: 26: ledSendByte(0);
  2553  039B  3000               	movlw	0
  2554  039C                     L1:	
  2555  039C  2451               	fcall	_ledSendByte
  2556  039D  0AF5               	incf	LED_Test@j,f
  2557  039E  1903               	skipnz
  2558  039F  0AF6               	incf	LED_Test@j+1,f
  2559  03A0  3000               	movlw	0
  2560  03A1  0276               	subwf	LED_Test@j+1,w
  2561  03A2  3014               	movlw	20
  2562  03A3  1903               	skipnz
  2563  03A4  0275               	subwf	LED_Test@j,w
  2564  03A5  1C03               	skipc
  2565  03A6  2B86               	goto	l1761
  2566                           
  2567                           ;LED.c: 27: }
  2568                           ;LED.c: 28: }
  2569                           ;LED.c: 29: _delay((unsigned long)((50)*(32000000/4000.0)));
  2570  03A7  3003               	movlw	3
  2571  03A8  00F4               	movwf	??_LED_Test+2
  2572  03A9  3008               	movlw	8
  2573  03AA  00F3               	movwf	??_LED_Test+1
  2574  03AB  3078               	movlw	120
  2575  03AC  00F2               	movwf	??_LED_Test
  2576  03AD                     u1237:	
  2577  03AD  0BF2               	decfsz	??_LED_Test,f
  2578  03AE  2BAD               	goto	u1237
  2579  03AF  0BF3               	decfsz	??_LED_Test+1,f
  2580  03B0  2BAD               	goto	u1237
  2581  03B1  0BF4               	decfsz	??_LED_Test+2,f
  2582  03B2  2BAD               	goto	u1237
  2583  03B3  3015               	movlw	21
  2584  03B4  0AF7               	incf	LED_Test@i,f
  2585  03B5  0277               	subwf	LED_Test@i,w
  2586  03B6  1803               	btfsc	3,0
  2587  03B7  0008               	return
  2588  03B8  2B84               	goto	l1755
  2589  03B9                     __end_of_LED_Test:	
  2590                           
  2591                           	psect	text10
  2592  02AF                     __ptext10:	
  2593 ;; *************** function _LED_Task *****************
  2594 ;; Defined at:
  2595 ;;		line 34 in file "../src/LED.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;		None
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;  i               1    6[COMMON] unsigned char 
  2600 ;;  i               2    4[COMMON] unsigned int 
  2601 ;;  i               2    2[COMMON] unsigned int 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;		None               void
  2604 ;; Registers used:
  2605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 1F/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1
  2611 ;;      Params:         0       0       0
  2612 ;;      Locals:         5       0       0
  2613 ;;      Temps:          0       0       0
  2614 ;;      Totals:         5       0       0
  2615 ;;Total ram usage:        5 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    4
  2618 ;; This function calls:
  2619 ;;		_ledSendByte
  2620 ;; This function is called by:
  2621 ;;		_main
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           
  2626                           ;psect for function _LED_Task
  2627  02AF                     _LED_Task:	
  2628                           
  2629                           ;LED.c: 36: static uint8_t ledOFF = 0;
  2630                           ;LED.c: 37: switch(LED_mode)
  2631                           
  2632                           ;incstack = 0
  2633                           ; Regs used in _LED_Task: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2634  02AF  2B01               	goto	l1835
  2635  02B0                     l1779:	
  2636                           
  2637                           ;LED.c: 40: if(ledOFF ==0)
  2638  02B0  08C4               	movf	LED_Task@ledOFF,f
  2639  02B1  1D03               	skipz
  2640  02B2  0008               	return
  2641                           
  2642                           ;LED.c: 41: {
  2643                           ;LED.c: 42: GIE = 0;
  2644  02B3  138B               	bcf	11,7	;volatile
  2645                           
  2646                           ;LED.c: 43: for(uint16_t i=0;i<20;i++)
  2647  02B4  01F2               	clrf	LED_Task@i
  2648  02B5  01F3               	clrf	LED_Task@i+1
  2649  02B6                     l1789:	
  2650                           
  2651                           ;LED.c: 44: {
  2652                           ;LED.c: 45: ledSendByte(0);
  2653  02B6  3000               	movlw	0
  2654  02B7  2451               	fcall	_ledSendByte
  2655                           
  2656                           ;LED.c: 46: ledSendByte(0);
  2657  02B8  3000               	movlw	0
  2658  02B9  2451               	fcall	_ledSendByte
  2659                           
  2660                           ;LED.c: 47: ledSendByte(0);
  2661  02BA  3000               	movlw	0
  2662  02BB  2451               	fcall	_ledSendByte
  2663  02BC  0AF2               	incf	LED_Task@i,f
  2664  02BD  1903               	skipnz
  2665  02BE  0AF3               	incf	LED_Task@i+1,f
  2666  02BF  3000               	movlw	0
  2667  02C0  0273               	subwf	LED_Task@i+1,w
  2668  02C1  3014               	movlw	20
  2669  02C2  1903               	skipnz
  2670  02C3  0272               	subwf	LED_Task@i,w
  2671  02C4  1C03               	skipc
  2672  02C5  2AB6               	goto	l1789
  2673                           
  2674                           ;LED.c: 48: }
  2675                           ;LED.c: 49: GIE = 1;
  2676  02C6  178B               	bsf	11,7	;volatile
  2677                           
  2678                           ;LED.c: 50: ledOFF = 1;
  2679  02C7  0020               	movlb	0	; select bank0
  2680  02C8  01C4               	clrf	LED_Task@ledOFF
  2681  02C9  0AC4               	incf	LED_Task@ledOFF,f
  2682  02CA  0008               	return
  2683  02CB                     l1795:	
  2684                           
  2685                           ;LED.c: 54: if(LED_color[0]!=LED_currentColor[0]|| LED_color[1]!=LED_currentColor[1]|| L
      +                          ED_color[2]!=LED_currentColor[2])
  2686  02CB  0838               	movf	_LED_color,w
  2687  02CC  063B               	xorwf	_LED_currentColor,w
  2688  02CD  1D03               	skipz
  2689  02CE  2AD7               	goto	l313
  2690  02CF  0839               	movf	_LED_color+1,w
  2691  02D0  063C               	xorwf	_LED_currentColor+1,w
  2692  02D1  1D03               	skipz
  2693  02D2  2AD7               	goto	l313
  2694  02D3  083A               	movf	_LED_color+2,w
  2695  02D4  063D               	xorwf	_LED_currentColor+2,w
  2696  02D5  1903               	skipnz
  2697  02D6  0008               	return
  2698  02D7                     l313:	
  2699                           
  2700                           ;LED.c: 57: {
  2701                           ;LED.c: 58: GIE = 0;
  2702  02D7  138B               	bcf	11,7	;volatile
  2703                           
  2704                           ;LED.c: 59: for(uint16_t i=0;i<20;i++)
  2705  02D8  01F4               	clrf	LED_Task@i_649
  2706  02D9  01F5               	clrf	LED_Task@i_649+1
  2707  02DA                     l1807:	
  2708                           
  2709                           ;LED.c: 60: {
  2710                           ;LED.c: 61: ledSendByte(LED_color[0]);
  2711  02DA  0020               	movlb	0	; select bank0
  2712  02DB  0838               	movf	_LED_color,w
  2713  02DC  2451               	fcall	_ledSendByte
  2714                           
  2715                           ;LED.c: 62: ledSendByte(LED_color[1]);
  2716  02DD  0020               	movlb	0	; select bank0
  2717  02DE  0839               	movf	_LED_color+1,w
  2718  02DF  2451               	fcall	_ledSendByte
  2719                           
  2720                           ;LED.c: 63: ledSendByte(LED_color[2]);
  2721  02E0  0020               	movlb	0	; select bank0
  2722  02E1  083A               	movf	_LED_color+2,w
  2723  02E2  2451               	fcall	_ledSendByte
  2724  02E3  0AF4               	incf	LED_Task@i_649,f
  2725  02E4  1903               	skipnz
  2726  02E5  0AF5               	incf	LED_Task@i_649+1,f
  2727  02E6  3000               	movlw	0
  2728  02E7  0275               	subwf	LED_Task@i_649+1,w
  2729  02E8  3014               	movlw	20
  2730  02E9  1903               	skipnz
  2731  02EA  0274               	subwf	LED_Task@i_649,w
  2732  02EB  1C03               	skipc
  2733  02EC  2ADA               	goto	l1807
  2734                           
  2735                           ;LED.c: 64: }
  2736                           ;LED.c: 65: GIE = 1;
  2737  02ED  178B               	bsf	11,7	;volatile
  2738                           
  2739                           ;LED.c: 66: for(uint8_t i=0;i<3;i++)
  2740  02EE  01F6               	clrf	LED_Task@i_650
  2741  02EF                     l1819:	
  2742                           
  2743                           ;LED.c: 67: LED_currentColor[i] = LED_color[i];
  2744  02EF  0876               	movf	LED_Task@i_650,w
  2745  02F0  3E3B               	addlw	_LED_currentColor& (0+255)
  2746  02F1  0086               	movwf	6
  2747  02F2  0187               	clrf	7
  2748  02F3  0876               	movf	LED_Task@i_650,w
  2749  02F4  3E38               	addlw	_LED_color& (0+255)
  2750  02F5  0084               	movwf	4
  2751  02F6  0185               	clrf	5
  2752  02F7  0800               	movf	0,w
  2753  02F8  0081               	movwf	1
  2754  02F9  3003               	movlw	3
  2755  02FA  0AF6               	incf	LED_Task@i_650,f
  2756  02FB  0276               	subwf	LED_Task@i_650,w
  2757  02FC  1C03               	skipc
  2758  02FD  2AEF               	goto	l1819
  2759  02FE                     l1825:	
  2760                           
  2761                           ;LED.c: 68: ledOFF = 0;
  2762  02FE  0020               	movlb	0	; select bank0
  2763  02FF  01C4               	clrf	LED_Task@ledOFF
  2764  0300  0008               	return
  2765  0301                     l1835:	
  2766  0301  0020               	movlb	0	; select bank0
  2767  0302  0845               	movf	_LED_mode,w
  2768                           
  2769                           ; Switch size 1, requested type "speed"
  2770                           ; Number of cases is 5, Range of values is 0 to 4
  2771                           ; switch strategies available:
  2772                           ; Name         Instructions Cycles
  2773                           ; direct_byte           16     6 (fixed)
  2774                           ; simple_byte           16     9 (average)
  2775                           ; jumptable            260     6 (fixed)
  2776                           ;	Chosen strategy is direct_byte
  2777  0303  0084               	movwf	4
  2778  0304  3005               	movlw	5
  2779  0305  0204               	subwf	4,w
  2780  0306  1803               	skipnc
  2781  0307  0008               	return
  2782  0308  304A               	movlw	low S2101
  2783  0309  3181               	movlp	high S2101
  2784  030A  0704               	addwf	4,w
  2785  030B  0082               	movwf	2
  2786  030C  0008               	return
  2787  030D                     __end_of_LED_Task:	
  2788                           
  2789                           	psect	swtext1
  2790  014A                     __pswtext1:	
  2791  014A                     S2101:	
  2792  014A  2AB0               	ljmp	l1779
  2793  014B  2ACB               	ljmp	l1795
  2794  014C  2AFE               	ljmp	l1825
  2795  014D  2AFE               	ljmp	l1825
  2796  014E  2AFE               	ljmp	l1825
  2797                           
  2798                           	psect	text11
  2799  0451                     __ptext11:	
  2800 ;; *************** function _ledSendByte *****************
  2801 ;; Defined at:
  2802 ;;		line 88 in file "../src/LED.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;  data            1    wreg     unsigned char 
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;  data            1    0[COMMON] unsigned char 
  2807 ;;  i               1    1[COMMON] unsigned char 
  2808 ;; Return value:  Size  Location     Type
  2809 ;;		None               void
  2810 ;; Registers used:
  2811 ;;		wreg, status,2, status,0
  2812 ;; Tracked objects:
  2813 ;;		On entry : 0/0
  2814 ;;		On exit  : 1F/2
  2815 ;;		Unchanged: 0/0
  2816 ;; Data sizes:     COMMON   BANK0   BANK1
  2817 ;;      Params:         0       0       0
  2818 ;;      Locals:         2       0       0
  2819 ;;      Temps:          0       0       0
  2820 ;;      Totals:         2       0       0
  2821 ;;Total ram usage:        2 bytes
  2822 ;; Hardware stack levels used:    1
  2823 ;; Hardware stack levels required when called:    3
  2824 ;; This function calls:
  2825 ;;		Nothing
  2826 ;; This function is called by:
  2827 ;;		_LED_Test
  2828 ;;		_LED_Task
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           
  2833                           ;psect for function _ledSendByte
  2834  0451                     _ledSendByte:	
  2835                           
  2836                           ;incstack = 0
  2837                           ; Regs used in _ledSendByte: [wreg+status,2+status,0]
  2838                           ;ledSendByte@data stored from wreg
  2839  0451  00F0               	movwf	ledSendByte@data
  2840                           
  2841                           ;LED.c: 105: for(uint8_t i = 0; i<8;i++)
  2842  0452  01F1               	clrf	ledSendByte@i
  2843  0453                     l325:	
  2844                           
  2845                           ;LED.c: 106: {
  2846                           ;LED.c: 107: if(data&0x80)
  2847  0453  1FF0               	btfss	ledSendByte@data,7
  2848  0454  2C5A               	goto	l333
  2849                           
  2850                           ;LED.c: 108: {
  2851                           ;LED.c: 109: do { LATA2 = 1; } while(0);
  2852  0455  0022               	movlb	2	; select bank2
  2853  0456  150C               	bsf	12,2	;volatile
  2854                           
  2855                           ;LED.c: 110: __nop();
  2856  0457  0000               	nop
  2857                           
  2858                           ;LED.c: 111: __nop();
  2859  0458  0000               	nop
  2860  0459  2C5D               	goto	l330
  2861  045A                     l333:	
  2862                           ;LED.c: 114: else
  2863                           ;LED.c: 115: {
  2864                           ;LED.c: 116: do { LATA2 = 1; } while(0);
  2865                           
  2866  045A  0022               	movlb	2	; select bank2
  2867  045B  150C               	bsf	12,2	;volatile
  2868                           
  2869                           ;LED.c: 117: __nop();
  2870  045C  0000               	nop
  2871  045D                     l330:	
  2872                           ;LED.c: 112: do { LATA2 = 0; } while(0);
  2873                           
  2874  045D  0022               	movlb	2	; select bank2
  2875  045E  110C               	bcf	12,2	;volatile
  2876  045F  3008               	movlw	8
  2877                           
  2878                           ;LED.c: 119: }
  2879                           ;LED.c: 120: data = data<<1;
  2880  0460  35F0               	lslf	ledSendByte@data,f
  2881  0461  0AF1               	incf	ledSendByte@i,f
  2882  0462  0271               	subwf	ledSendByte@i,w
  2883  0463  1803               	btfsc	3,0
  2884  0464  0008               	return
  2885  0465  2C53               	goto	l325
  2886  0466                     __end_of_ledSendByte:	
  2887                           
  2888                           	psect	text12
  2889  0031                     __ptext12:	
  2890 ;; *************** function _COMM_Task *****************
  2891 ;; Defined at:
  2892 ;;		line 52 in file "../src/serialCommand.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;		None
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;  receiveData     1   12[COMMON] unsigned char 
  2897 ;;  b               1   11[COMMON] unsigned char 
  2898 ;;  g               1   10[COMMON] unsigned char 
  2899 ;;  r               1    9[COMMON] unsigned char 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;		None               void
  2902 ;; Registers used:
  2903 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMMON   BANK0   BANK1
  2909 ;;      Params:         0       0       0
  2910 ;;      Locals:         4       0       0
  2911 ;;      Temps:          0       0       0
  2912 ;;      Totals:         4       0       0
  2913 ;;Total ram usage:        4 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    5
  2916 ;; This function calls:
  2917 ;;		_EUSART_Read
  2918 ;;		_UART_HexSrtingToBinary
  2919 ;;		_memset
  2920 ;;		_outputString
  2921 ;;		_strcmp
  2922 ;; This function is called by:
  2923 ;;		_main
  2924 ;; This function uses a non-reentrant model
  2925 ;;
  2926                           
  2927                           
  2928                           ;psect for function _COMM_Task
  2929  0031                     _COMM_Task:	
  2930                           
  2931                           ;serialCommand.c: 54: uint8_t receiveData,r,g,b;
  2932                           ;serialCommand.c: 55: static COMM_RECEIVE_STATE UART_ReceiveState = COMM_IDEL;
  2933                           ;serialCommand.c: 56: static uint8_t receiveCounter;
  2934                           ;serialCommand.c: 58: if((eusartRxCount))
  2935                           
  2936                           ;incstack = 0
  2937                           ; Regs used in _COMM_Task: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2938  0031  0020               	movlb	0	; select bank0
  2939  0032  0846               	movf	_eusartRxCount,w	;volatile
  2940  0033  1903               	btfsc	3,2
  2941  0034  0008               	return
  2942                           
  2943                           ;serialCommand.c: 59: {
  2944                           ;serialCommand.c: 60: receiveData = EUSART_Read();
  2945  0035  2425               	fcall	_EUSART_Read
  2946  0036  00FC               	movwf	COMM_Task@receiveData
  2947                           
  2948                           ;serialCommand.c: 64: switch(UART_ReceiveState)
  2949  0037  293E               	goto	l1977
  2950  0038                     l1845:	
  2951  0038  3010               	movlw	16
  2952                           
  2953                           ;serialCommand.c: 67: memset(inputCommand,0,16);
  2954  0039  01F0               	clrf	memset@c
  2955  003A  01F1               	clrf	memset@c+1
  2956  003B  00F2               	movwf	memset@n
  2957  003C  304C               	movlw	_inputCommand& (0+255)
  2958  003D  01F3               	clrf	memset@n+1
  2959  003E  248E               	fcall	_memset
  2960                           
  2961                           ;serialCommand.c: 69: if(receiveData == 'S')
  2962  003F  087C               	movf	COMM_Task@receiveData,w
  2963  0040  3A53               	xorlw	83
  2964  0041  1D03               	skipz
  2965  0042  2853               	goto	l1855
  2966                           
  2967                           ;serialCommand.c: 70: {
  2968                           ;serialCommand.c: 71: UART_ReceiveState = COMM_PROCESS_SET_COMMAND;
  2969  0043  0020               	movlb	0	; select bank0
  2970  0044  3053               	movlw	83
  2971  0045  01C2               	clrf	COMM_Task@UART_ReceiveState
  2972  0046  0AC2               	incf	COMM_Task@UART_ReceiveState,f
  2973                           
  2974                           ;serialCommand.c: 72: inputCommand[0] = 'S';
  2975  0047  284C               	goto	L3
  2976  0048                     l1857:	
  2977                           
  2978                           ;serialCommand.c: 76: {
  2979                           ;serialCommand.c: 77: UART_ReceiveState = COMM_PROCESS_GET_COMMAND;
  2980  0048  3002               	movlw	2
  2981  0049  0020               	movlb	0	; select bank0
  2982  004A  00C2               	movwf	COMM_Task@UART_ReceiveState
  2983                           
  2984                           ;serialCommand.c: 78: inputCommand[0] = 'G';
  2985  004B  3047               	movlw	71
  2986  004C                     L3:	
  2987  004C  00CC               	movwf	_inputCommand
  2988  004D  2851               	goto	l1853
  2989  004E                     l1863:	
  2990                           
  2991                           ;serialCommand.c: 82: {
  2992                           ;serialCommand.c: 83: UART_ReceiveState = COMM_PROCESS_COLOR;
  2993  004E  3003               	movlw	3
  2994  004F  0020               	movlb	0	; select bank0
  2995  0050  00C2               	movwf	COMM_Task@UART_ReceiveState
  2996  0051                     l1853:	
  2997                           
  2998                           ;serialCommand.c: 73: receiveCounter = 0;
  2999  0051  01C3               	clrf	COMM_Task@receiveCounter
  3000                           
  3001                           ;serialCommand.c: 74: }
  3002  0052  0008               	return
  3003  0053                     l1855:	
  3004                           
  3005                           ;serialCommand.c: 75: else if(receiveData == 'G')
  3006  0053  087C               	movf	COMM_Task@receiveData,w
  3007  0054  3A47               	xorlw	71
  3008  0055  1903               	btfsc	3,2
  3009  0056  2848               	goto	l1857
  3010                           
  3011                           ;serialCommand.c: 81: else if (receiveData == 'C')
  3012  0057  087C               	movf	COMM_Task@receiveData,w
  3013  0058  3A43               	xorlw	67
  3014  0059  1903               	btfsc	3,2
  3015  005A  284E               	goto	l1863
  3016                           
  3017                           ;serialCommand.c: 86: else if (receiveData == '\r'||receiveData =='\n')
  3018  005B  087C               	movf	COMM_Task@receiveData,w
  3019  005C  3A0D               	xorlw	13
  3020  005D  1903               	skipnz
  3021  005E  2869               	goto	l411
  3022  005F  087C               	movf	COMM_Task@receiveData,w
  3023  0060  3A0A               	xorlw	10
  3024  0061  1D03               	skipz
  3025  0062  2865               	goto	l1871
  3026  0063  0020               	movlb	0	; select bank0
  3027  0064  0008               	return
  3028  0065                     l1871:	
  3029                           
  3030                           ;serialCommand.c: 90: else
  3031                           ;serialCommand.c: 91: {
  3032                           ;serialCommand.c: 92: UART_ReceiveState = COMM_PROCESS_TRASH;
  3033  0065  3004               	movlw	4
  3034  0066  0020               	movlb	0	; select bank0
  3035  0067  00C2               	movwf	COMM_Task@UART_ReceiveState
  3036  0068  0008               	return
  3037  0069                     l411:	
  3038  0069  0020               	movlb	0	; select bank0
  3039  006A  0008               	return
  3040  006B                     l1873:	
  3041                           
  3042                           ;serialCommand.c: 96: inputCommand[++receiveCounter] = receiveData;
  3043  006B  0AC3               	incf	COMM_Task@receiveCounter,f
  3044  006C  0843               	movf	COMM_Task@receiveCounter,w
  3045  006D  3E4C               	addlw	_inputCommand& (0+255)
  3046  006E  0086               	movwf	6
  3047  006F  0187               	clrf	7
  3048  0070  087C               	movf	COMM_Task@receiveData,w
  3049  0071  0081               	movwf	1
  3050                           
  3051                           ;serialCommand.c: 97: if(receiveData == '\n')
  3052  0072  087C               	movf	COMM_Task@receiveData,w
  3053  0073  3A0A               	xorlw	10
  3054  0074  1D03               	skipz
  3055  0075  0008               	return
  3056                           
  3057                           ;serialCommand.c: 98: {
  3058                           ;serialCommand.c: 99: if(strcmp(CMD_GET_STATE,inputCommand)==0)
  3059  0076  302F               	movlw	low (_CMD_GET_STATE| (0+32768))
  3060  0077  00F0               	movwf	strcmp@s1
  3061  0078  3082               	movlw	high (_CMD_GET_STATE| (0+32768))
  3062  0079  00F1               	movwf	strcmp@s1+1
  3063  007A  304C               	movlw	_inputCommand& (0+255)
  3064  007B  00F2               	movwf	strcmp@s2
  3065  007C  230D               	fcall	_strcmp
  3066  007D  0871               	movf	?_strcmp+1,w
  3067  007E  0470               	iorwf	?_strcmp,w
  3068  007F  1903               	btfsc	3,2
  3069  0080  289A               	goto	l1895
  3070  0081  292E               	goto	l1965
  3071  0082                     l1881:	
  3072                           
  3073                           ;serialCommand.c: 104: outputString("LED is OFF\r\n");
  3074  0082  307A               	movlw	low (STR_1| (0+32768))
  3075  0083  00F4               	movwf	outputString@string
  3076  0084  3082               	movlw	high (STR_1| (0+32768))
  3077  0085  28E7               	goto	L4
  3078  0086                     l1883:	
  3079                           ;serialCommand.c: 105: break;
  3080                           
  3081                           
  3082                           ;serialCommand.c: 107: outputString("Direct color\r\n");
  3083  0086  306B               	movlw	low (STR_2| (0+32768))
  3084  0087  00F4               	movwf	outputString@string
  3085  0088  3082               	movlw	high (STR_2| (0+32768))
  3086  0089  28E7               	goto	L4
  3087  008A                     l1885:	
  3088                           ;serialCommand.c: 108: break;
  3089                           
  3090                           
  3091                           ;serialCommand.c: 110: outputString("Starry\r\n");
  3092  008A  3087               	movlw	low (STR_3| (0+32768))
  3093  008B  00F4               	movwf	outputString@string
  3094  008C  3082               	movlw	high (STR_3| (0+32768))
  3095  008D  28E7               	goto	L4
  3096  008E                     l1887:	
  3097                           ;serialCommand.c: 111: break;
  3098                           
  3099                           
  3100                           ;serialCommand.c: 113: outputString("Xmas\r\n");
  3101  008E  30A8               	movlw	low (STR_4| (0+32768))
  3102  008F  00F4               	movwf	outputString@string
  3103  0090  3082               	movlw	high (STR_4| (0+32768))
  3104  0091  28E7               	goto	L4
  3105  0092                     l1889:	
  3106                           ;serialCommand.c: 114: break;
  3107                           
  3108                           
  3109                           ;serialCommand.c: 116: outputString("Party\r\n");
  3110  0092  30A0               	movlw	low (STR_5| (0+32768))
  3111  0093  00F4               	movwf	outputString@string
  3112  0094  3082               	movlw	high (STR_5| (0+32768))
  3113  0095  28E7               	goto	L4
  3114  0096                     l1891:	
  3115                           ;serialCommand.c: 117: break;
  3116                           
  3117                           
  3118                           ;serialCommand.c: 119: outputString("ERROR\r\n");
  3119  0096  3098               	movlw	low (STR_6| (0+32768))
  3120  0097  00F4               	movwf	outputString@string
  3121  0098  3082               	movlw	high (STR_6| (0+32768))
  3122  0099  28E7               	goto	L4
  3123  009A                     l1895:	
  3124                           ;serialCommand.c: 120: break;
  3125                           
  3126  009A  0020               	movlb	0	; select bank0
  3127  009B  0845               	movf	_LED_mode,w
  3128                           
  3129                           ; Switch size 1, requested type "speed"
  3130                           ; Number of cases is 5, Range of values is 0 to 4
  3131                           ; switch strategies available:
  3132                           ; Name         Instructions Cycles
  3133                           ; direct_byte           16     6 (fixed)
  3134                           ; simple_byte           16     9 (average)
  3135                           ; jumptable            260     6 (fixed)
  3136                           ;	Chosen strategy is direct_byte
  3137  009C  0084               	movwf	4
  3138  009D  3005               	movlw	5
  3139  009E  0204               	subwf	4,w
  3140  009F  1803               	skipnc
  3141  00A0  2896               	goto	l1891
  3142  00A1  3181               	movlp	high S2103
  3143  00A2  304F               	movlw	low S2103
  3144  00A3  0704               	addwf	4,w
  3145  00A4  0082               	movwf	2
  3146  00A5  292E               	goto	l1965
  3147  00A6                     l1907:	
  3148                           ;serialCommand.c: 123: else
  3149                           ;serialCommand.c: 124: {
  3150                           ;serialCommand.c: 125: outputString("Invalid Command \r\n");
  3151                           
  3152                           
  3153                           ;serialCommand.c: 135: {
  3154                           ;serialCommand.c: 136: LED_mode = LED_OFF;
  3155  00A6  0020               	movlb	0	; select bank0
  3156  00A7  01C5               	clrf	_LED_mode
  3157  00A8  28E4               	goto	L9
  3158  00A9                     l1913:	
  3159                           ;serialCommand.c: 138: }
  3160                           
  3161                           ;serialCommand.c: 137: outputString("DONE!\r\n");
  3162                           
  3163                           
  3164                           ;serialCommand.c: 140: {
  3165                           ;serialCommand.c: 141: LED_mode = LED_DIRECT;
  3166  00A9  0020               	movlb	0	; select bank0
  3167  00AA  3040               	movlw	64
  3168  00AB  01C5               	clrf	_LED_mode
  3169  00AC  0AC5               	incf	_LED_mode,f
  3170                           
  3171                           ;serialCommand.c: 142: LED_color[0] = 64;
  3172  00AD  00B8               	movwf	_LED_color
  3173                           
  3174                           ;serialCommand.c: 143: LED_color[1] = 64;
  3175  00AE  00B9               	movwf	_LED_color+1
  3176  00AF  28E3               	goto	L10
  3177  00B0                     l1921:	
  3178                           ;serialCommand.c: 146: }
  3179                           
  3180                           ;serialCommand.c: 145: outputString("DONE!\r\n");
  3181                           
  3182                           ;serialCommand.c: 144: LED_color[2] = 64;
  3183                           
  3184                           
  3185                           ;serialCommand.c: 148: {
  3186                           ;serialCommand.c: 149: LED_mode = LED_STARRY;
  3187  00B0  3002               	movlw	2
  3188  00B1  28B5               	goto	L12
  3189  00B2                     l1927:	
  3190                           ;serialCommand.c: 151: }
  3191                           
  3192                           ;serialCommand.c: 150: outputString("DONE!\r\n");
  3193                           
  3194                           
  3195                           ;serialCommand.c: 153: {
  3196                           ;serialCommand.c: 154: LED_mode = LED_XMAS;
  3197  00B2  3003               	movlw	3
  3198  00B3  28B5               	goto	L12
  3199  00B4                     l1933:	
  3200                           ;serialCommand.c: 156: }
  3201                           
  3202                           ;serialCommand.c: 155: outputString("DONE!\r\n");
  3203                           
  3204                           
  3205                           ;serialCommand.c: 158: {
  3206                           ;serialCommand.c: 159: LED_mode = LED_PARTY;
  3207  00B4  3004               	movlw	4
  3208  00B5                     L12:	
  3209  00B5  0020               	movlb	0	; select bank0
  3210  00B6  00C5               	movwf	_LED_mode
  3211  00B7  28E4               	goto	L9
  3212  00B8                     l1941:	
  3213                           ;serialCommand.c: 162: else
  3214                           ;serialCommand.c: 163: {
  3215                           ;serialCommand.c: 164: outputString("Invalid Command \r\n");
  3216                           
  3217                           ;serialCommand.c: 160: outputString("DONE!\r\n");
  3218                           
  3219                           
  3220                           ;serialCommand.c: 171: inputCommand[receiveCounter++] = receiveData;
  3221  00B8  0843               	movf	COMM_Task@receiveCounter,w
  3222  00B9  3E4C               	addlw	_inputCommand& (0+255)
  3223  00BA  0086               	movwf	6
  3224  00BB  0187               	clrf	7
  3225  00BC  087C               	movf	COMM_Task@receiveData,w
  3226  00BD  0081               	movwf	1
  3227  00BE  0AC3               	incf	COMM_Task@receiveCounter,f
  3228                           
  3229                           ;serialCommand.c: 172: if(receiveCounter == 2)
  3230  00BF  0843               	movf	COMM_Task@receiveCounter,w
  3231  00C0  3A02               	xorlw	2
  3232  00C1  1D03               	skipz
  3233  00C2  28C7               	goto	l1949
  3234                           
  3235                           ;serialCommand.c: 173: {
  3236                           ;serialCommand.c: 174: r = UART_HexSrtingToBinary(inputCommand);
  3237  00C3  304C               	movlw	_inputCommand& (0+255)
  3238  00C4  2349               	fcall	_UART_HexSrtingToBinary
  3239  00C5  00F9               	movwf	COMM_Task@r
  3240                           
  3241                           ;serialCommand.c: 175: }
  3242  00C6  28D6               	goto	l1957
  3243  00C7                     l1949:	
  3244                           
  3245                           ;serialCommand.c: 176: else if(receiveCounter == 4)
  3246  00C7  0843               	movf	COMM_Task@receiveCounter,w
  3247  00C8  3A04               	xorlw	4
  3248  00C9  1D03               	skipz
  3249  00CA  28CF               	goto	l1953
  3250                           
  3251                           ;serialCommand.c: 177: {
  3252                           ;serialCommand.c: 178: g = UART_HexSrtingToBinary(inputCommand+2);
  3253  00CB  304E               	movlw	(_inputCommand+2)& (0+255)
  3254  00CC  2349               	fcall	_UART_HexSrtingToBinary
  3255  00CD  00FA               	movwf	COMM_Task@g
  3256                           
  3257                           ;serialCommand.c: 179: }
  3258  00CE  28D6               	goto	l1957
  3259  00CF                     l1953:	
  3260                           
  3261                           ;serialCommand.c: 180: else if(receiveCounter == 6)
  3262  00CF  0843               	movf	COMM_Task@receiveCounter,w
  3263  00D0  3A06               	xorlw	6
  3264  00D1  1D03               	skipz
  3265  00D2  28D6               	goto	l1957
  3266                           
  3267                           ;serialCommand.c: 181: {
  3268                           ;serialCommand.c: 182: b = UART_HexSrtingToBinary(inputCommand+4);
  3269  00D3  3050               	movlw	(_inputCommand+4)& (0+255)
  3270  00D4  2349               	fcall	_UART_HexSrtingToBinary
  3271  00D5  00FB               	movwf	COMM_Task@b
  3272  00D6                     l1957:	
  3273                           
  3274                           ;serialCommand.c: 183: }
  3275                           ;serialCommand.c: 184: if(receiveData =='\n')
  3276  00D6  087C               	movf	COMM_Task@receiveData,w
  3277  00D7  3A0A               	xorlw	10
  3278  00D8  1D03               	skipz
  3279  00D9  0008               	return
  3280                           
  3281                           ;serialCommand.c: 185: {
  3282                           ;serialCommand.c: 186: if(receiveCounter == 8)
  3283  00DA  0843               	movf	COMM_Task@receiveCounter,w
  3284  00DB  3A08               	xorlw	8
  3285  00DC  1D03               	skipz
  3286  00DD  292E               	goto	l1965
  3287                           
  3288                           ;serialCommand.c: 187: {
  3289                           ;serialCommand.c: 188: LED_color[0] = g;
  3290  00DE  087A               	movf	COMM_Task@g,w
  3291  00DF  00B8               	movwf	_LED_color
  3292                           
  3293                           ;serialCommand.c: 189: LED_color[1] = r;
  3294  00E0  0879               	movf	COMM_Task@r,w
  3295  00E1  00B9               	movwf	_LED_color+1
  3296                           
  3297                           ;serialCommand.c: 190: LED_color[2] = b;
  3298  00E2  087B               	movf	COMM_Task@b,w
  3299  00E3                     L10:	
  3300  00E3  00BA               	movwf	_LED_color+2
  3301  00E4                     L9:	
  3302                           
  3303                           ;serialCommand.c: 191: outputString("DONE!\r\n");
  3304  00E4  3090               	movlw	low (STR_8| (0+32768))
  3305  00E5  00F4               	movwf	outputString@string
  3306  00E6  3082               	movlw	high (STR_8| (0+32768))
  3307  00E7                     L4:	
  3308  00E7  00F5               	movwf	outputString@string+1
  3309  00E8  23B9               	fcall	_outputString
  3310  00E9                     l1899:	
  3311                           ;serialCommand.c: 161: }
  3312                           
  3313                           
  3314                           ;serialCommand.c: 126: }
  3315                           ;serialCommand.c: 127: UART_ReceiveState = COMM_IDEL;
  3316  00E9  0020               	movlb	0	; select bank0
  3317  00EA  01C2               	clrf	COMM_Task@UART_ReceiveState
  3318  00EB  0008               	return
  3319  00EC                     l1901:	
  3320                           
  3321                           ;serialCommand.c: 131: inputCommand[++receiveCounter] = receiveData;
  3322  00EC  0AC3               	incf	COMM_Task@receiveCounter,f
  3323  00ED  0843               	movf	COMM_Task@receiveCounter,w
  3324  00EE  3E4C               	addlw	_inputCommand& (0+255)
  3325  00EF  0086               	movwf	6
  3326  00F0  0187               	clrf	7
  3327  00F1  087C               	movf	COMM_Task@receiveData,w
  3328  00F2  0081               	movwf	1
  3329                           
  3330                           ;serialCommand.c: 132: if(receiveData == '\n')
  3331  00F3  087C               	movf	COMM_Task@receiveData,w
  3332  00F4  3A0A               	xorlw	10
  3333  00F5  1D03               	skipz
  3334  00F6  0008               	return
  3335                           
  3336                           ;serialCommand.c: 133: {
  3337                           ;serialCommand.c: 134: if(strcmp(CMD_SET_OFF,inputCommand)==0)
  3338  00F7  304B               	movlw	low (_CMD_SET_OFF| (0+32768))
  3339  00F8  00F0               	movwf	strcmp@s1
  3340  00F9  3082               	movlw	high (_CMD_SET_OFF| (0+32768))
  3341  00FA  00F1               	movwf	strcmp@s1+1
  3342  00FB  304C               	movlw	_inputCommand& (0+255)
  3343  00FC  00F2               	movwf	strcmp@s2
  3344  00FD  230D               	fcall	_strcmp
  3345  00FE  0871               	movf	?_strcmp+1,w
  3346  00FF  0470               	iorwf	?_strcmp,w
  3347  0100  1903               	btfsc	3,2
  3348  0101  28A6               	goto	l1907
  3349                           
  3350                           ;serialCommand.c: 139: else if(strcmp(CMD_SET_DIRECT,inputCommand)==0)
  3351  0102  3000               	movlw	low (_CMD_SET_DIRECT| (0+32768))
  3352  0103  00F0               	movwf	strcmp@s1
  3353  0104  3082               	movlw	high (_CMD_SET_DIRECT| (0+32768))
  3354  0105  00F1               	movwf	strcmp@s1+1
  3355  0106  304C               	movlw	_inputCommand& (0+255)
  3356  0107  00F2               	movwf	strcmp@s2
  3357  0108  230D               	fcall	_strcmp
  3358  0109  0871               	movf	?_strcmp+1,w
  3359  010A  0470               	iorwf	?_strcmp,w
  3360  010B  1903               	btfsc	3,2
  3361  010C  28A9               	goto	l1913
  3362                           
  3363                           ;serialCommand.c: 147: else if(strcmp(CMD_SET_STARRY,inputCommand)==0)
  3364  010D  3010               	movlw	low (_CMD_SET_STARRY| (0+32768))
  3365  010E  00F0               	movwf	strcmp@s1
  3366  010F  3082               	movlw	high (_CMD_SET_STARRY| (0+32768))
  3367  0110  00F1               	movwf	strcmp@s1+1
  3368  0111  304C               	movlw	_inputCommand& (0+255)
  3369  0112  00F2               	movwf	strcmp@s2
  3370  0113  230D               	fcall	_strcmp
  3371  0114  0871               	movf	?_strcmp+1,w
  3372  0115  0470               	iorwf	?_strcmp,w
  3373  0116  1903               	btfsc	3,2
  3374  0117  28B0               	goto	l1921
  3375                           
  3376                           ;serialCommand.c: 152: else if(strcmp(CMD_SET_XMAS,inputCommand)==0)
  3377  0118  303D               	movlw	low (_CMD_SET_XMAS| (0+32768))
  3378  0119  00F0               	movwf	strcmp@s1
  3379  011A  3082               	movlw	high (_CMD_SET_XMAS| (0+32768))
  3380  011B  00F1               	movwf	strcmp@s1+1
  3381  011C  304C               	movlw	_inputCommand& (0+255)
  3382  011D  00F2               	movwf	strcmp@s2
  3383  011E  230D               	fcall	_strcmp
  3384  011F  0871               	movf	?_strcmp+1,w
  3385  0120  0470               	iorwf	?_strcmp,w
  3386  0121  1903               	btfsc	3,2
  3387  0122  28B2               	goto	l1927
  3388                           
  3389                           ;serialCommand.c: 157: else if(strcmp(CMD_SET_PARTY,inputCommand)==0)
  3390  0123  3020               	movlw	low (_CMD_SET_PARTY| (0+32768))
  3391  0124  00F0               	movwf	strcmp@s1
  3392  0125  3082               	movlw	high (_CMD_SET_PARTY| (0+32768))
  3393  0126  00F1               	movwf	strcmp@s1+1
  3394  0127  304C               	movlw	_inputCommand& (0+255)
  3395  0128  00F2               	movwf	strcmp@s2
  3396  0129  230D               	fcall	_strcmp
  3397  012A  0871               	movf	?_strcmp+1,w
  3398  012B  0470               	iorwf	?_strcmp,w
  3399  012C  1903               	btfsc	3,2
  3400  012D  28B4               	goto	l1933
  3401  012E                     l1965:	
  3402                           ;serialCommand.c: 192: }
  3403                           
  3404                           
  3405                           ;serialCommand.c: 193: else
  3406                           ;serialCommand.c: 194: {
  3407                           ;serialCommand.c: 195: outputString("Invalid Command \r\n");
  3408  012E  3058               	movlw	low (STR_7| (0+32768))
  3409  012F  00F4               	movwf	outputString@string
  3410  0130  3082               	movlw	high (STR_7| (0+32768))
  3411  0131  28E7               	goto	L4
  3412  0132                     l1969:	
  3413                           
  3414                           ;serialCommand.c: 201: if(receiveData == '\n')
  3415  0132  087C               	movf	COMM_Task@receiveData,w
  3416  0133  3A0A               	xorlw	10
  3417  0134  1D03               	skipz
  3418  0135  0008               	return
  3419  0136  3058               	movlw	low (STR_7| (0+32768))
  3420                           
  3421                           ;serialCommand.c: 202: {
  3422                           ;serialCommand.c: 203: UART_ReceiveState = COMM_IDEL;
  3423  0137  01C2               	clrf	COMM_Task@UART_ReceiveState
  3424                           
  3425                           ;serialCommand.c: 204: outputString("Invalid Command \r\n");
  3426  0138  00F4               	movwf	outputString@string
  3427  0139  3082               	movlw	high (STR_7| (0+32768))
  3428  013A  00F5               	movwf	outputString@string+1
  3429  013B  23B9               	fcall	_outputString
  3430  013C  0020               	movlb	0	; select bank0
  3431  013D  0008               	return
  3432  013E                     l1977:	
  3433  013E  0020               	movlb	0	; select bank0
  3434  013F  0842               	movf	COMM_Task@UART_ReceiveState,w
  3435                           
  3436                           ; Switch size 1, requested type "speed"
  3437                           ; Number of cases is 5, Range of values is 0 to 4
  3438                           ; switch strategies available:
  3439                           ; Name         Instructions Cycles
  3440                           ; direct_byte           16     6 (fixed)
  3441                           ; simple_byte           16     9 (average)
  3442                           ; jumptable            260     6 (fixed)
  3443                           ;	Chosen strategy is direct_byte
  3444  0140  0084               	movwf	4
  3445  0141  3005               	movlw	5
  3446  0142  0204               	subwf	4,w
  3447  0143  1803               	skipnc
  3448  0144  28E9               	goto	l1899
  3449  0145  3181               	movlp	high S2105
  3450  0146  3054               	movlw	low S2105
  3451  0147  0704               	addwf	4,w
  3452  0148  0082               	movwf	2
  3453  0149  0008               	return
  3454  014A                     __end_of_COMM_Task:	
  3455                           
  3456                           	psect	swtext2
  3457  014F                     __pswtext2:	
  3458  014F                     S2103:	
  3459  014F  2882               	ljmp	l1881
  3460  0150  2886               	ljmp	l1883
  3461  0151  288A               	ljmp	l1885
  3462  0152  288E               	ljmp	l1887
  3463  0153  2892               	ljmp	l1889
  3464                           
  3465                           	psect	swtext3
  3466  0154                     __pswtext3:	
  3467  0154                     S2105:	
  3468  0154  2838               	ljmp	l1845
  3469  0155  28EC               	ljmp	l1901
  3470  0156  286B               	ljmp	l1873
  3471  0157  28B8               	ljmp	l1941
  3472  0158  2932               	ljmp	l1969
  3473                           
  3474                           	psect	text13
  3475  030D                     __ptext13:	
  3476 ;; *************** function _strcmp *****************
  3477 ;; Defined at:
  3478 ;;		line 5 in file "/Applications/microchip/xc8/v1.33/sources/common/strcmp.c"
  3479 ;; Parameters:    Size  Location     Type
  3480 ;;  s1              2    0[COMMON] PTR const unsigned char 
  3481 ;;		 -> CMD_SET_PARTY(15), CMD_SET_XMAS(14), CMD_SET_STARRY(16), CMD_SET_DIRECT(16), 
  3482 ;;		 -> CMD_SET_OFF(13), CMD_GET_STATE(14), 
  3483 ;;  s2              1    2[COMMON] PTR const unsigned char 
  3484 ;;		 -> inputCommand(16), 
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;  t1              1    5[COMMON] unsigned char 
  3487 ;;  t2              1    4[COMMON] unsigned char 
  3488 ;;  t0              1    3[COMMON] unsigned char 
  3489 ;; Return value:  Size  Location     Type
  3490 ;;                  2    0[COMMON] int 
  3491 ;; Registers used:
  3492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  3493 ;; Tracked objects:
  3494 ;;		On entry : 0/0
  3495 ;;		On exit  : 0/0
  3496 ;;		Unchanged: 0/0
  3497 ;; Data sizes:     COMMON   BANK0   BANK1
  3498 ;;      Params:         3       0       0
  3499 ;;      Locals:         3       0       0
  3500 ;;      Temps:          0       0       0
  3501 ;;      Totals:         6       0       0
  3502 ;;Total ram usage:        6 bytes
  3503 ;; Hardware stack levels used:    1
  3504 ;; Hardware stack levels required when called:    3
  3505 ;; This function calls:
  3506 ;;		Nothing
  3507 ;; This function is called by:
  3508 ;;		_COMM_Task
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           
  3513                           ;psect for function _strcmp
  3514  030D                     _strcmp:	
  3515  030D                     l1675:	
  3516                           ;incstack = 0
  3517                           ; Regs used in _strcmp: [wreg-fsr1h+status,2+status,0+pclath]
  3518                           
  3519  030D  0870               	movf	strcmp@s1,w
  3520  030E  0084               	movwf	4
  3521  030F  0871               	movf	strcmp@s1+1,w
  3522  0310  0085               	movwf	5
  3523  0311  0800               	movf	0,w	;code access
  3524  0312  00F3               	movwf	strcmp@t0
  3525  0313  0872               	movf	strcmp@s2,w
  3526  0314  0086               	movwf	6
  3527  0315  0187               	clrf	7
  3528  0316  0801               	movf	1,w
  3529  0317  00F5               	movwf	strcmp@t1
  3530  0318  08F3               	movf	strcmp@t0,f
  3531  0319  1903               	btfsc	3,2
  3532  031A  2B41               	goto	l1707
  3533  031B  3002               	movlw	2
  3534  031C  07F0               	addwf	strcmp@s1,f
  3535  031D  1803               	skipnc
  3536  031E  0AF1               	incf	strcmp@s1+1,f
  3537  031F  0873               	movf	strcmp@t0,w
  3538  0320  0675               	xorwf	strcmp@t1,w
  3539  0321  1D03               	btfss	3,2
  3540  0322  2B41               	goto	l1707
  3541  0323  30FF               	movlw	255
  3542  0324  0770               	addwf	strcmp@s1,w
  3543  0325  0084               	movwf	4
  3544  0326  30FF               	movlw	255
  3545  0327  3D71               	addwfc	strcmp@s1+1,w
  3546  0328  0085               	movwf	5
  3547  0329  0800               	movf	0,w	;code access
  3548  032A  00F4               	movwf	strcmp@t2
  3549  032B  0872               	movf	strcmp@s2,w
  3550  032C  0086               	movwf	6
  3551  032D  3F41               	moviw [1]fsr1
  3552  032E  00F5               	movwf	strcmp@t1
  3553  032F  08F4               	movf	strcmp@t2,f
  3554  0330  1D03               	skipz
  3555  0331  2B3A               	goto	l1697
  3556  0332                     l1693:	
  3557  0332  0874               	movf	strcmp@t2,w
  3558  0333  00F0               	movwf	?_strcmp
  3559  0334  01F1               	clrf	?_strcmp+1
  3560  0335  0875               	movf	strcmp@t1,w
  3561  0336  02F0               	subwf	?_strcmp,f
  3562  0337  1C03               	skipc
  3563  0338  03F1               	decf	?_strcmp+1,f
  3564  0339  0008               	return
  3565  033A                     l1697:	
  3566  033A  0AF2               	incf	strcmp@s2,f
  3567  033B  0AF2               	incf	strcmp@s2,f
  3568  033C  0875               	movf	strcmp@t1,w
  3569  033D  0674               	xorwf	strcmp@t2,w
  3570  033E  1D03               	btfss	3,2
  3571  033F  2B32               	goto	l1693
  3572  0340  2B0D               	goto	l1675
  3573  0341                     l1707:	
  3574  0341  0873               	movf	strcmp@t0,w
  3575  0342  00F0               	movwf	?_strcmp
  3576  0343  01F1               	clrf	?_strcmp+1
  3577  0344  0875               	movf	strcmp@t1,w
  3578  0345  02F0               	subwf	?_strcmp,f
  3579  0346  1C03               	skipc
  3580  0347  03F1               	decf	?_strcmp+1,f
  3581  0348  0008               	return
  3582  0349                     __end_of_strcmp:	
  3583                           
  3584                           	psect	text14
  3585  03B9                     __ptext14:	
  3586 ;; *************** function _outputString *****************
  3587 ;; Defined at:
  3588 ;;		line 27 in file "../src/serialCommand.c"
  3589 ;; Parameters:    Size  Location     Type
  3590 ;;  string          2    4[COMMON] PTR const unsigned char 
  3591 ;;		 -> STR_16(19), STR_15(19), STR_14(8), STR_13(19), 
  3592 ;;		 -> STR_12(8), STR_11(8), STR_10(8), STR_9(8), 
  3593 ;;		 -> STR_8(8), STR_7(19), STR_6(8), STR_5(8), 
  3594 ;;		 -> STR_4(7), STR_3(9), STR_2(15), STR_1(13), 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  i               1    8[COMMON] unsigned char 
  3597 ;; Return value:  Size  Location     Type
  3598 ;;		None               void
  3599 ;; Registers used:
  3600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMMON   BANK0   BANK1
  3606 ;;      Params:         2       0       0
  3607 ;;      Locals:         1       0       0
  3608 ;;      Temps:          2       0       0
  3609 ;;      Totals:         5       0       0
  3610 ;;Total ram usage:        5 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    4
  3613 ;; This function calls:
  3614 ;;		_EUSART_Write
  3615 ;;		_strlen
  3616 ;; This function is called by:
  3617 ;;		_COMM_Task
  3618 ;; This function uses a non-reentrant model
  3619 ;;
  3620                           
  3621                           
  3622                           ;psect for function _outputString
  3623  03B9                     _outputString:	
  3624                           
  3625                           ;serialCommand.c: 29: for(uint8_t i =0;i<strlen(string);i++)
  3626                           
  3627                           ;incstack = 0
  3628                           ; Regs used in _outputString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3629  03B9  01F8               	clrf	outputString@i
  3630  03BA                     l1643:	
  3631  03BA  0875               	movf	outputString@string+1,w
  3632  03BB  00F1               	movwf	strlen@s+1
  3633  03BC  0874               	movf	outputString@string,w
  3634  03BD  00F0               	movwf	strlen@s
  3635  03BE  240E               	fcall	_strlen
  3636  03BF  0878               	movf	outputString@i,w
  3637  03C0  00F6               	movwf	??_outputString
  3638  03C1  01F7               	clrf	??_outputString+1
  3639  03C2  0871               	movf	?_strlen+1,w
  3640  03C3  0277               	subwf	??_outputString+1,w
  3641  03C4  1D03               	skipz
  3642  03C5  2BC8               	goto	u705
  3643  03C6  0870               	movf	?_strlen,w
  3644  03C7  0276               	subwf	??_outputString,w
  3645  03C8                     u705:	
  3646  03C8  1803               	btfsc	3,0
  3647  03C9  0008               	return
  3648                           
  3649                           ;serialCommand.c: 30: {
  3650                           ;serialCommand.c: 31: EUSART_Write(string[i]);
  3651  03CA  0875               	movf	outputString@string+1,w
  3652  03CB  00F7               	movwf	??_outputString+1
  3653  03CC  0874               	movf	outputString@string,w
  3654  03CD  00F6               	movwf	??_outputString
  3655  03CE  0878               	movf	outputString@i,w
  3656  03CF  0776               	addwf	??_outputString,w
  3657  03D0  0084               	movwf	4
  3658  03D1  0877               	movf	??_outputString+1,w
  3659  03D2  1803               	skipnc
  3660  03D3  0A77               	incf	??_outputString+1,w
  3661  03D4  0085               	movwf	5
  3662  03D5  0800               	movf	0,w	;code access
  3663  03D6  23D9               	fcall	_EUSART_Write
  3664  03D7  0AF8               	incf	outputString@i,f
  3665  03D8  2BBA               	goto	l1643
  3666  03D9                     __end_of_outputString:	
  3667                           
  3668                           	psect	text15
  3669  040E                     __ptext15:	
  3670 ;; *************** function _strlen *****************
  3671 ;; Defined at:
  3672 ;;		line 4 in file "/Applications/microchip/xc8/v1.33/sources/common/strlen.c"
  3673 ;; Parameters:    Size  Location     Type
  3674 ;;  s               2    0[COMMON] PTR const unsigned char 
  3675 ;;		 -> STR_16(19), STR_15(19), STR_14(8), STR_13(19), 
  3676 ;;		 -> STR_12(8), STR_11(8), STR_10(8), STR_9(8), 
  3677 ;;		 -> STR_8(8), STR_7(19), STR_6(8), STR_5(8), 
  3678 ;;		 -> STR_4(7), STR_3(9), STR_2(15), STR_1(13), 
  3679 ;; Auto vars:     Size  Location     Type
  3680 ;;  cp              2    2[COMMON] PTR const unsigned char 
  3681 ;;		 -> STR_16(19), STR_15(19), STR_14(8), STR_13(19), 
  3682 ;;		 -> STR_12(8), STR_11(8), STR_10(8), STR_9(8), 
  3683 ;;		 -> STR_8(8), STR_7(19), STR_6(8), STR_5(8), 
  3684 ;;		 -> STR_4(7), STR_3(9), STR_2(15), STR_1(13), 
  3685 ;; Return value:  Size  Location     Type
  3686 ;;                  2    0[COMMON] unsigned int 
  3687 ;; Registers used:
  3688 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  3689 ;; Tracked objects:
  3690 ;;		On entry : 0/0
  3691 ;;		On exit  : 0/0
  3692 ;;		Unchanged: 0/0
  3693 ;; Data sizes:     COMMON   BANK0   BANK1
  3694 ;;      Params:         2       0       0
  3695 ;;      Locals:         2       0       0
  3696 ;;      Temps:          0       0       0
  3697 ;;      Totals:         4       0       0
  3698 ;;Total ram usage:        4 bytes
  3699 ;; Hardware stack levels used:    1
  3700 ;; Hardware stack levels required when called:    3
  3701 ;; This function calls:
  3702 ;;		Nothing
  3703 ;; This function is called by:
  3704 ;;		_outputString
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           
  3709                           ;psect for function _strlen
  3710  040E                     _strlen:	
  3711                           
  3712                           ;incstack = 0
  3713                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+pclath]
  3714  040E  0871               	movf	strlen@s+1,w
  3715  040F  00F3               	movwf	strlen@cp+1
  3716  0410  0870               	movf	strlen@s,w
  3717  0411  00F2               	movwf	strlen@cp
  3718  0412                     l1569:	
  3719  0412  0872               	movf	strlen@cp,w
  3720  0413  0084               	movwf	4
  3721  0414  0873               	movf	strlen@cp+1,w
  3722  0415  0085               	movwf	5
  3723  0416  0800               	movf	0,w	;code access
  3724  0417  3800               	iorlw	0
  3725  0418  1903               	btfsc	3,2
  3726  0419  2C1E               	goto	l1571
  3727  041A  0AF2               	incf	strlen@cp,f
  3728  041B  1903               	skipnz
  3729  041C  0AF3               	incf	strlen@cp+1,f
  3730  041D  2C12               	goto	l1569
  3731  041E                     l1571:	
  3732  041E  0870               	movf	strlen@s,w
  3733  041F  0272               	subwf	strlen@cp,w
  3734  0420  00F0               	movwf	?_strlen
  3735  0421  0871               	movf	strlen@s+1,w
  3736  0422  3B73               	subwfb	strlen@cp+1,w
  3737  0423  00F1               	movwf	?_strlen+1
  3738  0424  0008               	return
  3739  0425                     __end_of_strlen:	
  3740                           
  3741                           	psect	text16
  3742  03D9                     __ptext16:	
  3743 ;; *************** function _EUSART_Write *****************
  3744 ;; Defined at:
  3745 ;;		line 139 in file "../src/mcc_generated_files/eusart.c"
  3746 ;; Parameters:    Size  Location     Type
  3747 ;;  txData          1    wreg     unsigned char 
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;  txData          1    0[COMMON] unsigned char 
  3750 ;; Return value:  Size  Location     Type
  3751 ;;		None               void
  3752 ;; Registers used:
  3753 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 1F/1
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMMON   BANK0   BANK1
  3759 ;;      Params:         0       0       0
  3760 ;;      Locals:         1       0       0
  3761 ;;      Temps:          0       0       0
  3762 ;;      Totals:         1       0       0
  3763 ;;Total ram usage:        1 bytes
  3764 ;; Hardware stack levels used:    1
  3765 ;; Hardware stack levels required when called:    3
  3766 ;; This function calls:
  3767 ;;		Nothing
  3768 ;; This function is called by:
  3769 ;;		_outputString
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           
  3774                           ;psect for function _EUSART_Write
  3775  03D9                     _EUSART_Write:	
  3776                           
  3777                           ;incstack = 0
  3778                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  3779                           ;EUSART_Write@txData stored from wreg
  3780  03D9  00F0               	movwf	EUSART_Write@txData
  3781  03DA                     l222:	
  3782                           ;eusart.c: 142: {
  3783                           
  3784  03DA  0020               	movlb	0	; select bank0
  3785  03DB  0849               	movf	_eusartTxBufferRemaining,w	;volatile
  3786  03DC  1903               	btfsc	3,2
  3787  03DD  2BDA               	goto	l222
  3788                           
  3789                           ;eusart.c: 143: }
  3790                           ;eusart.c: 145: if(0 == PIE1bits.TXIE)
  3791  03DE  0021               	movlb	1	; select bank1
  3792  03DF  1A11               	btfsc	17,4	;volatile
  3793  03E0  2BE5               	goto	l225
  3794                           
  3795                           ;eusart.c: 146: {
  3796                           ;eusart.c: 147: TXREG = txData;
  3797  03E1  0870               	movf	EUSART_Write@txData,w
  3798  03E2  0023               	movlb	3	; select bank3
  3799  03E3  009A               	movwf	26	;volatile
  3800                           
  3801                           ;eusart.c: 148: }
  3802  03E4  2BF3               	goto	l1563
  3803  03E5                     l225:	
  3804                           
  3805                           ;eusart.c: 149: else
  3806                           ;eusart.c: 150: {
  3807                           ;eusart.c: 151: PIE1bits.TXIE = 0;
  3808  03E5  1211               	bcf	17,4	;volatile
  3809                           
  3810                           ;eusart.c: 152: eusartTxBuffer[eusartTxHead++] = txData;
  3811  03E6  0020               	movlb	0	; select bank0
  3812  03E7  084A               	movf	_eusartTxHead,w
  3813  03E8  3E30               	addlw	_eusartTxBuffer& (0+255)
  3814  03E9  0086               	movwf	6
  3815  03EA  0187               	clrf	7
  3816  03EB  0870               	movf	EUSART_Write@txData,w
  3817  03EC  0081               	movwf	1
  3818  03ED  3008               	movlw	8
  3819  03EE  0ACA               	incf	_eusartTxHead,f
  3820                           
  3821                           ;eusart.c: 153: if(sizeof(eusartTxBuffer) <= eusartTxHead)
  3822  03EF  024A               	subwf	_eusartTxHead,w
  3823  03F0  1803               	btfsc	3,0
  3824                           
  3825                           ;eusart.c: 154: {
  3826                           ;eusart.c: 155: eusartTxHead = 0;
  3827  03F1  01CA               	clrf	_eusartTxHead
  3828                           
  3829                           ;eusart.c: 156: }
  3830                           ;eusart.c: 157: eusartTxBufferRemaining--;
  3831  03F2  03C9               	decf	_eusartTxBufferRemaining,f	;volatile
  3832  03F3                     l1563:	
  3833                           
  3834                           ;eusart.c: 158: }
  3835                           ;eusart.c: 159: PIE1bits.TXIE = 1;
  3836  03F3  0021               	movlb	1	; select bank1
  3837  03F4  1611               	bsf	17,4	;volatile
  3838  03F5  0008               	return
  3839  03F6                     __end_of_EUSART_Write:	
  3840                           
  3841                           	psect	text17
  3842  048E                     __ptext17:	
  3843 ;; *************** function _memset *****************
  3844 ;; Defined at:
  3845 ;;		line 8 in file "/Applications/microchip/xc8/v1.33/sources/common/memset.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;  p1              1    wreg     PTR void 
  3848 ;;		 -> inputCommand(16), 
  3849 ;;  c               2    0[COMMON] int 
  3850 ;;  n               2    2[COMMON] unsigned int 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  p1              1    4[COMMON] PTR void 
  3853 ;;		 -> inputCommand(16), 
  3854 ;;  p               1    5[COMMON] PTR unsigned char 
  3855 ;;		 -> inputCommand(16), 
  3856 ;; Return value:  Size  Location     Type
  3857 ;;                  1    wreg      PTR void 
  3858 ;; Registers used:
  3859 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3860 ;; Tracked objects:
  3861 ;;		On entry : 0/0
  3862 ;;		On exit  : 0/0
  3863 ;;		Unchanged: 0/0
  3864 ;; Data sizes:     COMMON   BANK0   BANK1
  3865 ;;      Params:         4       0       0
  3866 ;;      Locals:         2       0       0
  3867 ;;      Temps:          0       0       0
  3868 ;;      Totals:         6       0       0
  3869 ;;Total ram usage:        6 bytes
  3870 ;; Hardware stack levels used:    1
  3871 ;; Hardware stack levels required when called:    3
  3872 ;; This function calls:
  3873 ;;		Nothing
  3874 ;; This function is called by:
  3875 ;;		_COMM_Task
  3876 ;; This function uses a non-reentrant model
  3877 ;;
  3878                           
  3879                           
  3880                           ;psect for function _memset
  3881  048E                     _memset:	
  3882                           
  3883                           ;incstack = 0
  3884                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  3885                           ;memset@p1 stored from wreg
  3886  048E  00F4               	movwf	memset@p1
  3887  048F  00F5               	movwf	memset@p
  3888  0490                     l1673:	
  3889  0490  3001               	movlw	1
  3890  0491  02F2               	subwf	memset@n,f
  3891  0492  3000               	movlw	0
  3892  0493  3BF3               	subwfb	memset@n+1,f
  3893  0494  0A72               	incf	memset@n,w
  3894  0495  1903               	skipnz
  3895  0496  0A73               	incf	memset@n+1,w
  3896  0497  1903               	btfsc	3,2
  3897  0498  0008               	return
  3898  0499  0875               	movf	memset@p,w
  3899  049A  0086               	movwf	6
  3900  049B  0187               	clrf	7
  3901  049C  0870               	movf	memset@c,w
  3902  049D  0081               	movwf	1
  3903  049E  0AF5               	incf	memset@p,f
  3904  049F  2C90               	goto	l1673
  3905  04A0                     __end_of_memset:	
  3906                           
  3907                           	psect	text18
  3908  0349                     __ptext18:	
  3909 ;; *************** function _UART_HexSrtingToBinary *****************
  3910 ;; Defined at:
  3911 ;;		line 35 in file "../src/serialCommand.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;  data            1    wreg     PTR unsigned char 
  3914 ;;		 -> inputCommand(16), 
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;  data            1    3[COMMON] PTR unsigned char 
  3917 ;;		 -> inputCommand(16), 
  3918 ;;  i               1    2[COMMON] unsigned char 
  3919 ;; Return value:  Size  Location     Type
  3920 ;;                  1    wreg      unsigned char 
  3921 ;; Registers used:
  3922 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  3923 ;; Tracked objects:
  3924 ;;		On entry : 1F/0
  3925 ;;		On exit  : 1F/0
  3926 ;;		Unchanged: 1F/0
  3927 ;; Data sizes:     COMMON   BANK0   BANK1
  3928 ;;      Params:         0       0       0
  3929 ;;      Locals:         2       0       0
  3930 ;;      Temps:          2       0       0
  3931 ;;      Totals:         4       0       0
  3932 ;;Total ram usage:        4 bytes
  3933 ;; Hardware stack levels used:    1
  3934 ;; Hardware stack levels required when called:    3
  3935 ;; This function calls:
  3936 ;;		Nothing
  3937 ;; This function is called by:
  3938 ;;		_COMM_Task
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           
  3943                           ;psect for function _UART_HexSrtingToBinary
  3944  0349                     _UART_HexSrtingToBinary:	
  3945                           
  3946                           ;incstack = 0
  3947                           ; Regs used in _UART_HexSrtingToBinary: [wreg-fsr1h+status,2+status,0]
  3948                           ;UART_HexSrtingToBinary@data stored from wreg
  3949  0349  00F3               	movwf	UART_HexSrtingToBinary@data
  3950                           
  3951                           ;serialCommand.c: 37: for(uint8_t i=0; i<2; i++)
  3952  034A  01F2               	clrf	UART_HexSrtingToBinary@i
  3953  034B                     l1651:	
  3954                           
  3955                           ;serialCommand.c: 38: {
  3956                           ;serialCommand.c: 39: if(data[i]>=0x30 && data[i]<=0x39)
  3957  034B  0872               	movf	UART_HexSrtingToBinary@i,w
  3958  034C  0773               	addwf	UART_HexSrtingToBinary@data,w
  3959  034D  00F0               	movwf	??_UART_HexSrtingToBinary
  3960  034E  0086               	movwf	6
  3961  034F  3030               	movlw	48
  3962  0350  0187               	clrf	7
  3963  0351  0201               	subwf	1,w
  3964  0352  0872               	movf	UART_HexSrtingToBinary@i,w
  3965  0353  1C03               	skipc
  3966  0354  2B68               	goto	L14
  3967  0355  0773               	addwf	UART_HexSrtingToBinary@data,w
  3968  0356  00F0               	movwf	??_UART_HexSrtingToBinary
  3969  0357  0086               	movwf	6
  3970  0358  303A               	movlw	58
  3971  0359  0201               	subwf	1,w
  3972                           
  3973                           ;serialCommand.c: 40: {
  3974                           ;serialCommand.c: 41: data[i] = data[i]-0x30;
  3975  035A  0872               	movf	UART_HexSrtingToBinary@i,w
  3976  035B  1803               	skipnc
  3977  035C  2B68               	goto	L14
  3978  035D  0773               	addwf	UART_HexSrtingToBinary@data,w
  3979  035E  00F0               	movwf	??_UART_HexSrtingToBinary
  3980  035F  0086               	movwf	6
  3981  0360  0872               	movf	UART_HexSrtingToBinary@i,w
  3982  0361  0773               	addwf	UART_HexSrtingToBinary@data,w
  3983  0362  00F1               	movwf	??_UART_HexSrtingToBinary+1
  3984  0363  0084               	movwf	4
  3985  0364  0185               	clrf	5
  3986  0365  0800               	movf	0,w
  3987  0366  3ED0               	addlw	208
  3988  0367  2B73               	goto	L13
  3989  0368                     L14:	
  3990                           ;serialCommand.c: 43: else
  3991                           ;serialCommand.c: 44: {
  3992                           ;serialCommand.c: 45: data[i] = data[i] -0x41 +0x0A;
  3993                           
  3994                           ;serialCommand.c: 42: }
  3995                           
  3996  0368  0773               	addwf	UART_HexSrtingToBinary@data,w
  3997  0369  00F0               	movwf	??_UART_HexSrtingToBinary
  3998  036A  0086               	movwf	6
  3999  036B  0187               	clrf	7
  4000  036C  0872               	movf	UART_HexSrtingToBinary@i,w
  4001  036D  0773               	addwf	UART_HexSrtingToBinary@data,w
  4002  036E  00F1               	movwf	??_UART_HexSrtingToBinary+1
  4003  036F  0084               	movwf	4
  4004  0370  0185               	clrf	5
  4005  0371  0800               	movf	0,w
  4006  0372  3EC9               	addlw	201
  4007  0373                     L13:	
  4008  0373  0081               	movwf	1
  4009  0374  3002               	movlw	2
  4010  0375  0AF2               	incf	UART_HexSrtingToBinary@i,f
  4011  0376  0272               	subwf	UART_HexSrtingToBinary@i,w
  4012  0377  1C03               	skipc
  4013  0378  2B4B               	goto	l1651
  4014                           
  4015                           ;serialCommand.c: 46: }
  4016                           ;serialCommand.c: 47: }
  4017                           ;serialCommand.c: 48: return ((data[0]<<4)+data[1]);
  4018  0379  0A73               	incf	UART_HexSrtingToBinary@data,w
  4019  037A  0086               	movwf	6
  4020  037B  0187               	clrf	7
  4021  037C  0873               	movf	UART_HexSrtingToBinary@data,w
  4022  037D  0084               	movwf	4
  4023  037E  0185               	clrf	5
  4024  037F  0E00               	swapf	0,w
  4025  0380  39F0               	andlw	240
  4026  0381  0701               	addwf	1,w
  4027  0382  0008               	return
  4028  0383                     __end_of_UART_HexSrtingToBinary:	
  4029                           
  4030                           	psect	text19
  4031  0425                     __ptext19:	
  4032 ;; *************** function _EUSART_Read *****************
  4033 ;; Defined at:
  4034 ;;		line 118 in file "../src/mcc_generated_files/eusart.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;		None
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;  readValue       1    0[COMMON] unsigned char 
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      unsigned char 
  4041 ;; Registers used:
  4042 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4043 ;; Tracked objects:
  4044 ;;		On entry : 1F/0
  4045 ;;		On exit  : 1F/1
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMMON   BANK0   BANK1
  4048 ;;      Params:         0       0       0
  4049 ;;      Locals:         1       0       0
  4050 ;;      Temps:          0       0       0
  4051 ;;      Totals:         1       0       0
  4052 ;;Total ram usage:        1 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    3
  4055 ;; This function calls:
  4056 ;;		Nothing
  4057 ;; This function is called by:
  4058 ;;		_COMM_Task
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           
  4063                           ;psect for function _EUSART_Read
  4064  0425                     _EUSART_Read:	
  4065  0425                     l1609:	
  4066                           ;eusart.c: 122: while(0 == eusartRxCount)
  4067                           
  4068                           ;incstack = 0
  4069                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  4070                           
  4071  0425  0846               	movf	_eusartRxCount,w	;volatile
  4072  0426  1903               	btfsc	3,2
  4073  0427  2C25               	goto	l1609
  4074                           
  4075                           ;eusart.c: 124: }
  4076                           ;eusart.c: 126: PIE1bits.RCIE = 0;
  4077  0428  0021               	movlb	1	; select bank1
  4078  0429  1291               	bcf	17,5	;volatile
  4079                           
  4080                           ;eusart.c: 128: readValue = eusartRxBuffer[eusartRxTail++];
  4081  042A  0020               	movlb	0	; select bank0
  4082  042B  0848               	movf	_eusartRxTail,w
  4083  042C  3E20               	addlw	_eusartRxBuffer& (0+255)
  4084  042D  0086               	movwf	6
  4085  042E  0187               	clrf	7
  4086  042F  0801               	movf	1,w
  4087  0430  00F0               	movwf	EUSART_Read@readValue
  4088  0431  3010               	movlw	16
  4089  0432  0AC8               	incf	_eusartRxTail,f
  4090                           
  4091                           ;eusart.c: 129: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  4092  0433  0248               	subwf	_eusartRxTail,w
  4093  0434  1803               	btfsc	3,0
  4094                           
  4095                           ;eusart.c: 130: {
  4096                           ;eusart.c: 131: eusartRxTail = 0;
  4097  0435  01C8               	clrf	_eusartRxTail
  4098                           
  4099                           ;eusart.c: 132: }
  4100                           ;eusart.c: 133: eusartRxCount--;
  4101  0436  03C6               	decf	_eusartRxCount,f	;volatile
  4102                           
  4103                           ;eusart.c: 134: PIE1bits.RCIE = 1;
  4104  0437  0021               	movlb	1	; select bank1
  4105  0438  1691               	bsf	17,5	;volatile
  4106                           
  4107                           ;eusart.c: 136: return readValue;
  4108  0439  0870               	movf	EUSART_Read@readValue,w
  4109  043A  0008               	return
  4110  043B                     __end_of_EUSART_Read:	
  4111                           
  4112                           	psect	intentry
  4113  0004                     __pintentry:	
  4114 ;; *************** function _INTERRUPT_InterruptManager *****************
  4115 ;; Defined at:
  4116 ;;		line 52 in file "../src/mcc_generated_files/interrupt_manager.c"
  4117 ;; Parameters:    Size  Location     Type
  4118 ;;		None
  4119 ;; Auto vars:     Size  Location     Type
  4120 ;;		None
  4121 ;; Return value:  Size  Location     Type
  4122 ;;		None               void
  4123 ;; Registers used:
  4124 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4125 ;; Tracked objects:
  4126 ;;		On entry : 0/0
  4127 ;;		On exit  : 1E/0
  4128 ;;		Unchanged: 0/0
  4129 ;; Data sizes:     COMMON   BANK0   BANK1
  4130 ;;      Params:         0       0       0
  4131 ;;      Locals:         0       0       0
  4132 ;;      Temps:          0       0       0
  4133 ;;      Totals:         0       0       0
  4134 ;;Total ram usage:        0 bytes
  4135 ;; Hardware stack levels used:    1
  4136 ;; Hardware stack levels required when called:    2
  4137 ;; This function calls:
  4138 ;;		_CMP1_ISR
  4139 ;;		_EUSART_Receive_ISR
  4140 ;;		_EUSART_Transmit_ISR
  4141 ;;		_TMR1_ISR
  4142 ;; This function is called by:
  4143 ;;		Interrupt level 1
  4144 ;; This function uses a non-reentrant model
  4145 ;;
  4146                           
  4147  0004                     _INTERRUPT_InterruptManager:	
  4148                           
  4149                           ;incstack = 0
  4150                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4151  0004  147E               	bsf	126,0	;set compiler interrupt flag
  4152  0005  3180               	pagesel	$
  4153                           
  4154                           ;interrupt_manager.c: 55: if(PIE1bits.RCIE == 1 && PIR1bits.RCIF == 1)
  4155  0006  0021               	movlb	1	; select bank1
  4156  0007  1E91               	btfss	17,5	;volatile
  4157  0008  280E               	goto	i1l167
  4158  0009  0020               	movlb	0	; select bank0
  4159  000A  1E91               	btfss	17,5	;volatile
  4160  000B  280E               	goto	i1l167
  4161                           
  4162                           ;interrupt_manager.c: 56: {
  4163                           ;interrupt_manager.c: 57: EUSART_Receive_ISR();
  4164  000C  2466               	fcall	_EUSART_Receive_ISR
  4165                           
  4166                           ;interrupt_manager.c: 58: }
  4167  000D  2825               	goto	i1l175
  4168  000E                     i1l167:	
  4169                           
  4170                           ;interrupt_manager.c: 59: else if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  4171  000E  0021               	movlb	1	; select bank1
  4172  000F  1E11               	btfss	17,4	;volatile
  4173  0010  2816               	goto	i1l169
  4174  0011  0020               	movlb	0	; select bank0
  4175  0012  1E11               	btfss	17,4	;volatile
  4176  0013  2816               	goto	i1l169
  4177                           
  4178                           ;interrupt_manager.c: 60: {
  4179                           ;interrupt_manager.c: 61: EUSART_Transmit_ISR();
  4180  0014  243B               	fcall	_EUSART_Transmit_ISR
  4181                           
  4182                           ;interrupt_manager.c: 62: }
  4183  0015  2825               	goto	i1l175
  4184  0016                     i1l169:	
  4185                           
  4186                           ;interrupt_manager.c: 63: else if(PIE2bits.C1IE == 1 && PIR2bits.C1IF == 1)
  4187  0016  0021               	movlb	1	; select bank1
  4188  0017  1E92               	btfss	18,5	;volatile
  4189  0018  281E               	goto	i1l171
  4190  0019  0020               	movlb	0	; select bank0
  4191  001A  1E92               	btfss	18,5	;volatile
  4192  001B  281E               	goto	i1l171
  4193                           
  4194                           ;interrupt_manager.c: 64: {
  4195                           ;interrupt_manager.c: 65: CMP1_ISR();
  4196  001C  24F5               	fcall	_CMP1_ISR
  4197                           
  4198                           ;interrupt_manager.c: 66: }
  4199  001D  2825               	goto	i1l175
  4200  001E                     i1l171:	
  4201                           
  4202                           ;interrupt_manager.c: 67: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  4203  001E  0021               	movlb	1	; select bank1
  4204  001F  1C11               	btfss	17,0	;volatile
  4205  0020  2825               	goto	i1l175
  4206  0021  0020               	movlb	0	; select bank0
  4207  0022  1C11               	btfss	17,0	;volatile
  4208  0023  2825               	goto	i1l175
  4209                           
  4210                           ;interrupt_manager.c: 68: {
  4211                           ;interrupt_manager.c: 69: TMR1_ISR();
  4212  0024  247B               	fcall	_TMR1_ISR
  4213  0025                     i1l175:	
  4214                           ;interrupt_manager.c: 70: }
  4215                           
  4216  0025  107E               	bcf	126,0	;clear compiler interrupt flag
  4217  0026  0009               	retfie
  4218  0027                     __end_of_INTERRUPT_InterruptManager:	
  4219                           
  4220                           	psect	text21
  4221  047B                     __ptext21:	
  4222 ;; *************** function _TMR1_ISR *****************
  4223 ;; Defined at:
  4224 ;;		line 152 in file "../src/mcc_generated_files/tmr1.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;		None
  4227 ;; Auto vars:     Size  Location     Type
  4228 ;;		None
  4229 ;; Return value:  Size  Location     Type
  4230 ;;		None               void
  4231 ;; Registers used:
  4232 ;;		wreg, status,2, status,0, pclath, cstack
  4233 ;; Tracked objects:
  4234 ;;		On entry : 1F/0
  4235 ;;		On exit  : 1F/0
  4236 ;;		Unchanged: 0/0
  4237 ;; Data sizes:     COMMON   BANK0   BANK1
  4238 ;;      Params:         0       0       0
  4239 ;;      Locals:         0       0       0
  4240 ;;      Temps:          0       0       0
  4241 ;;      Totals:         0       0       0
  4242 ;;Total ram usage:        0 bytes
  4243 ;; Hardware stack levels used:    1
  4244 ;; Hardware stack levels required when called:    1
  4245 ;; This function calls:
  4246 ;;		_TMR1_CallBack
  4247 ;; This function is called by:
  4248 ;;		_INTERRUPT_InterruptManager
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           
  4253                           ;psect for function _TMR1_ISR
  4254  047B                     _TMR1_ISR:	
  4255                           
  4256                           ;tmr1.c: 154: static volatile unsigned int CountCallBack = 0;
  4257                           ;tmr1.c: 157: PIR1bits.TMR1IF = 0;
  4258                           
  4259                           ;incstack = 0
  4260                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
  4261  047B  1011               	bcf	17,0	;volatile
  4262                           
  4263                           ;tmr1.c: 159: TMR1H = (timer1ReloadVal >> 8);
  4264  047C  0841               	movf	_timer1ReloadVal+1,w	;volatile
  4265  047D  0097               	movwf	23	;volatile
  4266                           
  4267                           ;tmr1.c: 160: TMR1L = timer1ReloadVal;
  4268  047E  0840               	movf	_timer1ReloadVal,w	;volatile
  4269  047F  0096               	movwf	22	;volatile
  4270                           
  4271                           ;tmr1.c: 163: if (++CountCallBack >= 16)
  4272  0480  0ABE               	incf	TMR1_ISR@CountCallBack,f	;volatile
  4273  0481  1903               	skipnz
  4274  0482  0ABF               	incf	TMR1_ISR@CountCallBack+1,f	;volatile
  4275  0483  3000               	movlw	0
  4276  0484  023F               	subwf	TMR1_ISR@CountCallBack+1,w	;volatile
  4277  0485  3010               	movlw	16
  4278  0486  1903               	skipnz
  4279  0487  023E               	subwf	TMR1_ISR@CountCallBack,w	;volatile
  4280  0488  1C03               	skipc
  4281  0489  0008               	return
  4282                           
  4283                           ;tmr1.c: 164: {
  4284                           ;tmr1.c: 166: TMR1_CallBack();
  4285  048A  24F7               	fcall	_TMR1_CallBack
  4286                           
  4287                           ;tmr1.c: 169: CountCallBack = 0;
  4288  048B  01BE               	clrf	TMR1_ISR@CountCallBack	;volatile
  4289  048C  01BF               	clrf	TMR1_ISR@CountCallBack+1	;volatile
  4290  048D  0008               	return
  4291  048E                     __end_of_TMR1_ISR:	
  4292                           
  4293                           	psect	text22
  4294  04F7                     __ptext22:	
  4295 ;; *************** function _TMR1_CallBack *****************
  4296 ;; Defined at:
  4297 ;;		line 174 in file "../src/mcc_generated_files/tmr1.c"
  4298 ;; Parameters:    Size  Location     Type
  4299 ;;		None
  4300 ;; Auto vars:     Size  Location     Type
  4301 ;;		None
  4302 ;; Return value:  Size  Location     Type
  4303 ;;		None               void
  4304 ;; Registers used:
  4305 ;;		None
  4306 ;; Tracked objects:
  4307 ;;		On entry : 1F/0
  4308 ;;		On exit  : 1F/0
  4309 ;;		Unchanged: 1F/0
  4310 ;; Data sizes:     COMMON   BANK0   BANK1
  4311 ;;      Params:         0       0       0
  4312 ;;      Locals:         0       0       0
  4313 ;;      Temps:          0       0       0
  4314 ;;      Totals:         0       0       0
  4315 ;;Total ram usage:        0 bytes
  4316 ;; Hardware stack levels used:    1
  4317 ;; This function calls:
  4318 ;;		Nothing
  4319 ;; This function is called by:
  4320 ;;		_TMR1_ISR
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           
  4325                           ;psect for function _TMR1_CallBack
  4326  04F7                     _TMR1_CallBack:	
  4327                           
  4328                           ;incstack = 0
  4329                           ; Regs used in _TMR1_CallBack: []
  4330  04F7  0008               	return
  4331  04F8                     __end_of_TMR1_CallBack:	
  4332                           
  4333                           	psect	text23
  4334  043B                     __ptext23:	
  4335 ;; *************** function _EUSART_Transmit_ISR *****************
  4336 ;; Defined at:
  4337 ;;		line 172 in file "../src/mcc_generated_files/eusart.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;		None               void
  4344 ;; Registers used:
  4345 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4346 ;; Tracked objects:
  4347 ;;		On entry : 1F/0
  4348 ;;		On exit  : 1E/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMMON   BANK0   BANK1
  4351 ;;      Params:         0       0       0
  4352 ;;      Locals:         0       0       0
  4353 ;;      Temps:          0       0       0
  4354 ;;      Totals:         0       0       0
  4355 ;;Total ram usage:        0 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; This function calls:
  4358 ;;		Nothing
  4359 ;; This function is called by:
  4360 ;;		_INTERRUPT_InterruptManager
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _EUSART_Transmit_ISR
  4366  043B                     _EUSART_Transmit_ISR:	
  4367                           
  4368                           ;eusart.c: 176: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4372  043B  3008               	movlw	8
  4373  043C  0249               	subwf	_eusartTxBufferRemaining,w
  4374  043D  1803               	skipnc
  4375  043E  2C4E               	goto	i1l237
  4376                           
  4377                           ;eusart.c: 177: {
  4378                           ;eusart.c: 178: TXREG = eusartTxBuffer[eusartTxTail++];
  4379  043F  084B               	movf	_eusartTxTail,w
  4380  0440  3E30               	addlw	_eusartTxBuffer& (0+255)
  4381  0441  0086               	movwf	6
  4382  0442  0187               	clrf	7
  4383  0443  0801               	movf	1,w
  4384  0444  0023               	movlb	3	; select bank3
  4385  0445  009A               	movwf	26	;volatile
  4386  0446  0020               	movlb	0	; select bank0
  4387  0447  3008               	movlw	8
  4388  0448  0ACB               	incf	_eusartTxTail,f
  4389                           
  4390                           ;eusart.c: 179: if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4391  0449  024B               	subwf	_eusartTxTail,w
  4392  044A  1803               	btfsc	3,0
  4393                           
  4394                           ;eusart.c: 180: {
  4395                           ;eusart.c: 181: eusartTxTail = 0;
  4396  044B  01CB               	clrf	_eusartTxTail
  4397                           
  4398                           ;eusart.c: 182: }
  4399                           ;eusart.c: 183: eusartTxBufferRemaining++;
  4400  044C  0AC9               	incf	_eusartTxBufferRemaining,f	;volatile
  4401                           
  4402                           ;eusart.c: 184: }
  4403  044D  0008               	return
  4404  044E                     i1l237:	
  4405                           
  4406                           ;eusart.c: 185: else
  4407                           ;eusart.c: 186: {
  4408                           ;eusart.c: 187: PIE1bits.TXIE = 0;
  4409  044E  0021               	movlb	1	; select bank1
  4410  044F  1211               	bcf	17,4	;volatile
  4411  0450  0008               	return
  4412  0451                     __end_of_EUSART_Transmit_ISR:	
  4413                           
  4414                           	psect	text24
  4415  0466                     __ptext24:	
  4416 ;; *************** function _EUSART_Receive_ISR *****************
  4417 ;; Defined at:
  4418 ;;		line 191 in file "../src/mcc_generated_files/eusart.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;		None
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;		None
  4423 ;; Return value:  Size  Location     Type
  4424 ;;		None               void
  4425 ;; Registers used:
  4426 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4427 ;; Tracked objects:
  4428 ;;		On entry : 1F/0
  4429 ;;		On exit  : 1F/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMMON   BANK0   BANK1
  4432 ;;      Params:         0       0       0
  4433 ;;      Locals:         0       0       0
  4434 ;;      Temps:          0       0       0
  4435 ;;      Totals:         0       0       0
  4436 ;;Total ram usage:        0 bytes
  4437 ;; Hardware stack levels used:    1
  4438 ;; This function calls:
  4439 ;;		Nothing
  4440 ;; This function is called by:
  4441 ;;		_INTERRUPT_InterruptManager
  4442 ;; This function uses a non-reentrant model
  4443 ;;
  4444                           
  4445                           
  4446                           ;psect for function _EUSART_Receive_ISR
  4447  0466                     _EUSART_Receive_ISR:	
  4448                           
  4449                           ;eusart.c: 193: if(1 == RCSTAbits.OERR)
  4450                           
  4451                           ;incstack = 0
  4452                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4453  0466  0023               	movlb	3	; select bank3
  4454  0467  1C9D               	btfss	29,1	;volatile
  4455  0468  2C6B               	goto	i1l1727
  4456                           
  4457                           ;eusart.c: 194: {
  4458                           ;eusart.c: 197: RCSTAbits.CREN = 0;
  4459  0469  121D               	bcf	29,4	;volatile
  4460                           
  4461                           ;eusart.c: 198: RCSTAbits.CREN = 1;
  4462  046A  161D               	bsf	29,4	;volatile
  4463  046B                     i1l1727:	
  4464                           
  4465                           ;eusart.c: 199: }
  4466                           ;eusart.c: 202: eusartRxBuffer[eusartRxHead++] = RCREG;
  4467  046B  0020               	movlb	0	; select bank0
  4468  046C  0847               	movf	_eusartRxHead,w
  4469  046D  3E20               	addlw	_eusartRxBuffer& (0+255)
  4470  046E  0086               	movwf	6
  4471  046F  0187               	clrf	7
  4472  0470  0023               	movlb	3	; select bank3
  4473  0471  0819               	movf	25,w	;volatile
  4474  0472  0081               	movwf	1
  4475  0473  0020               	movlb	0	; select bank0
  4476  0474  3010               	movlw	16
  4477  0475  0AC7               	incf	_eusartRxHead,f
  4478                           
  4479                           ;eusart.c: 203: if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4480  0476  0247               	subwf	_eusartRxHead,w
  4481  0477  1803               	btfsc	3,0
  4482                           
  4483                           ;eusart.c: 204: {
  4484                           ;eusart.c: 205: eusartRxHead = 0;
  4485  0478  01C7               	clrf	_eusartRxHead
  4486                           
  4487                           ;eusart.c: 206: }
  4488                           ;eusart.c: 207: eusartRxCount++;
  4489  0479  0AC6               	incf	_eusartRxCount,f	;volatile
  4490  047A  0008               	return
  4491  047B                     __end_of_EUSART_Receive_ISR:	
  4492                           
  4493                           	psect	text25
  4494  04F5                     __ptext25:	
  4495 ;; *************** function _CMP1_ISR *****************
  4496 ;; Defined at:
  4497 ;;		line 89 in file "../src/mcc_generated_files/cmp1.c"
  4498 ;; Parameters:    Size  Location     Type
  4499 ;;		None
  4500 ;; Auto vars:     Size  Location     Type
  4501 ;;		None
  4502 ;; Return value:  Size  Location     Type
  4503 ;;		None               void
  4504 ;; Registers used:
  4505 ;;		None
  4506 ;; Tracked objects:
  4507 ;;		On entry : 1F/0
  4508 ;;		On exit  : 1F/0
  4509 ;;		Unchanged: 0/0
  4510 ;; Data sizes:     COMMON   BANK0   BANK1
  4511 ;;      Params:         0       0       0
  4512 ;;      Locals:         0       0       0
  4513 ;;      Temps:          0       0       0
  4514 ;;      Totals:         0       0       0
  4515 ;;Total ram usage:        0 bytes
  4516 ;; Hardware stack levels used:    1
  4517 ;; This function calls:
  4518 ;;		Nothing
  4519 ;; This function is called by:
  4520 ;;		_INTERRUPT_InterruptManager
  4521 ;; This function uses a non-reentrant model
  4522 ;;
  4523                           
  4524                           
  4525                           ;psect for function _CMP1_ISR
  4526  04F5                     _CMP1_ISR:	
  4527                           
  4528                           ;cmp1.c: 92: PIR2bits.C1IF = 0;
  4529                           
  4530                           ;incstack = 0
  4531                           ; Regs used in _CMP1_ISR: []
  4532  04F5  1292               	bcf	18,5	;volatile
  4533  04F6  0008               	return
  4534  04F7                     __end_of_CMP1_ISR:	
  4535  007E                     btemp	set	126	;btemp
  4536  007E                     pic14e$flags	set	126
  4537  007E                     wtemp	set	126
  4538  007E                     wtemp0	set	126
  4539  0080                     wtemp1	set	128
  4540  0082                     wtemp2	set	130
  4541  0084                     wtemp3	set	132
  4542  0086                     wtemp4	set	134
  4543  0088                     wtemp5	set	136
  4544  007F                     wtemp6	set	127
  4545  007E                     ttemp	set	126
  4546  007E                     ttemp0	set	126
  4547  0081                     ttemp1	set	129
  4548  0084                     ttemp2	set	132
  4549  0087                     ttemp3	set	135
  4550  007F                     ttemp4	set	127
  4551  007E                     ltemp	set	126
  4552  007E                     ltemp0	set	126
  4553  0082                     ltemp1	set	130
  4554  0086                     ltemp2	set	134
  4555  0080                     ltemp3	set	128


Data Sizes:
    Strings     87
    Constant    88
    Data        0
    BSS         60
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80      0      60
    BANK1            32      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_16(CODE[19]), STR_15(CODE[19]), STR_14(CODE[8]), STR_13(CODE[19]), 
		 -> STR_12(CODE[8]), STR_11(CODE[8]), STR_10(CODE[8]), STR_9(CODE[8]), 
		 -> STR_8(CODE[8]), STR_7(CODE[19]), STR_6(CODE[8]), STR_5(CODE[8]), 
		 -> STR_4(CODE[7]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[13]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_16(CODE[19]), STR_15(CODE[19]), STR_14(CODE[8]), STR_13(CODE[19]), 
		 -> STR_12(CODE[8]), STR_11(CODE[8]), STR_10(CODE[8]), STR_9(CODE[8]), 
		 -> STR_8(CODE[8]), STR_7(CODE[19]), STR_6(CODE[8]), STR_5(CODE[8]), 
		 -> STR_4(CODE[7]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[13]), 

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 16
		 -> inputCommand(BANK0[16]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 16
		 -> CMD_SET_PARTY(CODE[15]), CMD_SET_XMAS(CODE[14]), CMD_SET_STARRY(CODE[16]), CMD_SET_DIRECT(CODE[16]), 
		 -> CMD_SET_OFF(CODE[13]), CMD_GET_STATE(CODE[14]), 

    memset@p1	PTR void  size(1) Largest target is 16
		 -> inputCommand(BANK0[16]), 

    memset@p	PTR unsigned char  size(1) Largest target is 16
		 -> inputCommand(BANK0[16]), 

    sp__memset	PTR void  size(1) Largest target is 16
		 -> inputCommand(BANK0[16]), 

    UART_HexSrtingToBinary@data	PTR unsigned char  size(1) Largest target is 16
		 -> inputCommand(BANK0[16]), 

    outputString@string	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_16(CODE[19]), STR_15(CODE[19]), STR_14(CODE[8]), STR_13(CODE[19]), 
		 -> STR_12(CODE[8]), STR_11(CODE[8]), STR_10(CODE[8]), STR_9(CODE[8]), 
		 -> STR_8(CODE[8]), STR_7(CODE[19]), STR_6(CODE[8]), STR_5(CODE[8]), 
		 -> STR_4(CODE[7]), STR_3(CODE[9]), STR_2(CODE[15]), STR_1(CODE[13]), 


Critical Paths under _main in COMMON

    _main->_COMM_Task
    _LED_Test->_ledSendByte
    _LED_Task->_ledSendByte
    _COMM_Task->_outputString
    _outputString->_strlen

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    3973
                                             13 COMMON     1     1      0
                          _COMM_Task
                           _LED_Task
                           _LED_Test
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
                    _CMP1_Initialize
                  _EUSART_Initialize
                     _FVR_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR1_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FVR_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CMP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LED_Test                                             6     6      0     205
                                              2 COMMON     6     6      0
                        _ledSendByte
 ---------------------------------------------------------------------------------
 (1) _LED_Task                                             5     5      0     251
                                              2 COMMON     5     5      0
                        _ledSendByte
 ---------------------------------------------------------------------------------
 (2) _ledSendByte                                          2     2      0      69
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _COMM_Task                                            4     4      0    3517
                                              9 COMMON     4     4      0
                        _EUSART_Read
             _UART_HexSrtingToBinary
                             _memset
                       _outputString
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     3      3    1149
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (2) _outputString                                         5     3      2    1312
                                              4 COMMON     5     3      2
                       _EUSART_Write
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     154
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         1     1      0      44
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _memset                                               6     2      4     254
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _UART_HexSrtingToBinary                               4     4      0     444
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Read                                          1     1      0      24
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0       0
                           _CMP1_ISR
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             0     0      0       0
                      _TMR1_CallBack
 ---------------------------------------------------------------------------------
 (6) _TMR1_CallBack                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Receive_ISR                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CMP1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _COMM_Task
     _EUSART_Read
     _UART_HexSrtingToBinary
     _memset
     _outputString
       _EUSART_Write
       _strlen
     _strcmp
   _LED_Task
     _ledSendByte
   _LED_Test
     _ledSendByte
   _SYSTEM_Initialize
     _CMP1_Initialize
     _EUSART_Initialize
     _FVR_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR1_Initialize
       _TMR1_StartTimer

 _INTERRUPT_InterruptManager (ROOT)
   _CMP1_ISR
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _TMR1_ISR
     _TMR1_CallBack

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      4A       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      0      3C       6       75.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0      4A       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Feb  2 16:23:21 2015

         UART_HexSrtingToBinary@data 0073                                    pc 0002  
                        __CFG_CP$OFF 0000                                   l26 04DF  
                  ??_CMP1_Initialize 0070               __end_of_FVR_Initialize 04F2  
                                l222 03DA                                  l225 03E5  
                                l313 02D7                                  l330 045D  
                                l411 0069                                  l333 045A  
                                l325 0453                                  _GIE 005F  
                       __CFG_CPD$OFF 0000                                  u705 03C8  
                                u845 038F                      _timer1ReloadVal 0040  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                       __CFG_IESO$ON 0000                                 S2101 014A  
                               S2103 014F                                 S2105 0154  
                       ?_EUSART_Read 0070                         __CFG_LVP$OFF 0000  
                               l2015 04C5                                 l1609 0425  
                               l1651 034B                                 l1563 03F3  
                               l1571 041E                                 l1643 03BA  
                               l1707 0341                                 l1547 04F2  
                               l1901 00EC                                 l1807 02DA  
                               l1673 0490                                 l1569 0412  
                               l1921 00B0                                 l1913 00A9  
                               l1825 02FE                                 l1761 0386  
                               l1675 030D                                 l1907 00A6  
                               l1819 02EF                                 l1835 0301  
                               l1755 0384                                 l1693 0332  
                               l1941 00B8                                 l1933 00B4  
                               l1853 0051                                 l1845 0038  
                               l1765 0397                                 l1589 04A0  
                               l1927 00B2                                 l1871 0065  
                               l1863 004E                                 l1855 0053  
                               l1697 033A                                 l1953 00CF  
                               l1881 0082                                 l1873 006B  
                               l1857 0048                                 l1891 0096  
                               l1883 0086                                 l1795 02CB  
                               l1779 02B0                                 l1965 012E  
                               l1957 00D6                                 l1949 00C7  
                               l1885 008A                                 l1789 02B6  
                               l1887 008E                                 l1895 009A  
                               l1969 0132                                 l1889 0092  
                               l1977 013E                                 l1899 00E9  
                               STR_1 027A                                 STR_2 026B  
                               STR_3 0287                                 STR_4 02A8  
                               STR_5 02A0                                 STR_6 0298  
                               STR_7 0258                                 STR_8 0290  
                               STR_9 0290                                 u1227 04C9  
                               u1237 03AD                                 _LATA 010C  
                 __size_of_COMM_Task 0119                                 _PLLR 04D6  
                               _WPUA 020C                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                __size_of_outputString 0020  
                               _main 04C1                                 fsr0h 0005  
                               fsr1h 0007                                 fsr0l 0004  
                               indf0 0000                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                      __CFG_BOREN$ON 0000                                 ltemp 007E  
                               start 0027                                 ttemp 007E  
                               wtemp 007E                     __end_of_CMP1_ISR 04F7  
                      __CFG_PLLEN$ON 0000                      ?_FVR_Initialize 0070  
                      ?_EUSART_Write 0070       __size_of_OSCILLATOR_Initialize 0008  
                   __end_of_LED_Task 030D                     __end_of_LED_Test 03B9  
      __end_of_OSCILLATOR_Initialize 04E2                                ?_main 0070  
               __end_of_CMD_SET_XMAS 024B                                STR_10 0290  
                              STR_11 0290                                STR_12 0290  
                              STR_13 0258                                STR_14 0290  
                              STR_15 0258                                STR_16 0258  
                      __CFG_WDTE$OFF 0000                      _TMR1_StartTimer 04F2  
                              _T1CON 0018                                _LATA2 0862  
                              i1l171 001E                                i1l237 044E  
                              i1l175 0025                                i1l167 000E  
                              i1l169 0016                                _RCREG 0199  
                              _RCSTA 019D                                _TMR1H 0017  
                              _TMR1L 0016                                _TRISA 008C  
                              _TXREG 019A                                _TXSTA 019E  
            COMM_Task@receiveCounter 0043                         _outputString 03B9  
                   __end_of_TMR1_ISR 048E              __end_of_TMR1_Initialize 04B1  
                              ltemp0 007E                                ltemp1 0082  
                              ltemp2 0086                                ltemp3 0080  
                              ttemp0 007E                                ttemp1 0081  
                              ttemp2 0084                                ttemp3 0087  
                              ttemp4 007F                                wtemp0 007E  
                              wtemp1 0080                                wtemp2 0082  
                              wtemp3 0084                                wtemp4 0086  
                              wtemp5 0088                                wtemp6 007F  
              __end_of_CMD_GET_STATE 023D                       __CFG_MCLRE$OFF 0000  
                    __initialization 0028                         __end_of_main 04CF  
                     ??_EUSART_Write 0070          ?_INTERRUPT_InterruptManager 0070  
                  __end_of_COMM_Task 014A                               ??_main 007D  
              __end_of_CMD_SET_PARTY 022F                               _APFCON 011D  
                             _ANSELA 018C                               _T1GCON 0019  
                             i1l1727 046B                               _FVRCON 0117  
                             _OSCCON 0099                               _SPBRGH 019C  
                             _SPBRGL 019B                 __size_of_ledSendByte 0015  
                     __CFG_PWRTE$OFF 0000              __end_of_TMR1_StartTimer 04F5  
                     __CFG_STVREN$ON 0000                  _EUSART_Transmit_ISR 043B  
                             _memset 048E                               _strcmp 030D  
                             _strlen 040E                            ?_CMP1_ISR 0070  
               ?_EUSART_Transmit_ISR 0070                __end_of_TMR1_CallBack 04F8  
           ??_UART_HexSrtingToBinary 0070                     ?_TMR1_Initialize 0070  
               __size_of_EUSART_Read 0016                    _SYSTEM_Initialize 04E8  
            __end_of__initialization 002E                            ?_LED_Task 0070  
                          ?_LED_Test 0070                      _CMP1_Initialize 04CF  
                 ?_SYSTEM_Initialize 0070                       __pcstackCOMMON 0070  
                ??_SYSTEM_Initialize 0070                            ?_TMR1_ISR 0070  
                     _CMD_SET_DIRECT 0200                            LED_Task@i 0072  
                          LED_Test@i 0077                            LED_Test@j 0075  
                     _CMD_SET_STARRY 0210                       _OPTION_REGbits 0095  
                         ??_CMP1_ISR 0070            __end_of_SYSTEM_Initialize 04EE  
              ??_EUSART_Transmit_ISR 0070                           __pbssBANK0 0020  
               __end_of_EUSART_Write 03F6                           ??_LED_Task 0072  
                         ??_LED_Test 0072                         _CMD_SET_XMAS 023D  
        __size_of_EUSART_Receive_ISR 0015                     ??_FVR_Initialize 0070  
                         __pmaintext 04C1               __end_of_CMD_SET_DIRECT 0210  
                   ?_TMR1_StartTimer 0070                           ??_TMR1_ISR 0070  
                         __pintentry 0004               __end_of_CMD_SET_STARRY 0220  
                            _CM1CON0 0111                              _CM1CON1 0112  
                            _BAUDCON 019F                              ?_memset 0070  
                            ?_strcmp 0070                              ?_strlen 0070  
                      _eusartRxCount 0046                              _OSCSTAT 009A  
                            _OSCTUNE 0098              __end_of_CMP1_Initialize 04DA  
    __size_of_UART_HexSrtingToBinary 003A                      __size_of_memset 0012  
                            __ptext1 04E8                              __ptext2 04A0  
                            __ptext3 04F2                              __ptext4 04B1  
                            __ptext5 04DA                              __ptext6 04EE  
                            __ptext7 03F6                              __ptext8 04CF  
                            __ptext9 0383                      __size_of_strcmp 003C  
                    __size_of_strlen 0017                            _T1CONbits 0018  
              _OSCILLATOR_Initialize 04DA                            _COMM_Task 0031  
           ??_PIN_MANAGER_Initialize 0070                        LED_Task@i_650 0076  
                      LED_Task@i_649 0074           __size_of_SYSTEM_Initialize 0006  
                            clrloop0 04E3                 end_of_initialization 002E  
                          _LED_color 0038                              memset@c 0070  
                            memset@n 0072                              memset@p 0075  
                  _EUSART_Initialize 03F6           COMM_Task@UART_ReceiveState 0042  
                 ?_EUSART_Initialize 0070                            _RCSTAbits 019D  
                       __pstringtext 0200              UART_HexSrtingToBinary@i 0072  
             _UART_HexSrtingToBinary 0349                              strlen@s 0070  
                ??_EUSART_Initialize 0070                           COMM_Task@b 007B  
                         COMM_Task@g 007A                           COMM_Task@r 0079  
                         ?_COMM_Task 0070                     __CFG_FOSC$INTOSC 0000  
                 outputString@string 0074                __size_of_EUSART_Write 001D  
                   ?_CMP1_Initialize 0070                        ??_ledSendByte 0070  
                  __size_of_CMP1_ISR 0002            __end_of_EUSART_Initialize 040E  
                  __size_of_LED_Task 005E                    __size_of_LED_Test 0036  
                __end_of_CMD_SET_OFF 0258                         _EUSART_Write 03D9  
                  __size_of_TMR1_ISR 0013               ?_OSCILLATOR_Initialize 0070  
                     __end_of_memset 04A0                       __end_of_strcmp 0349  
                     __end_of_strlen 0425                  start_initialization 0028  
    __size_of_PIN_MANAGER_Initialize 0010                        ??_EUSART_Read 0070  
                      _CMD_GET_STATE 022F                  __end_of_ledSendByte 0466  
           __size_of_TMR1_Initialize 0011                             ??_memset 0074  
             __size_of_TMR1_CallBack 0001                             ??_strcmp 0073  
                           ??_strlen 0072                          ??_COMM_Task 0079  
        __end_of_EUSART_Transmit_ISR 0451                TMR1_ISR@CountCallBack 003E  
                          ___latbits 0000                        ?_outputString 0074  
                   _LED_currentColor 003B                  __end_of__stringdata 02AF  
                      _CMD_SET_PARTY 0220           __end_of_EUSART_Receive_ISR 047B  
         __size_of_EUSART_Initialize 0018                  __end_of_EUSART_Read 043B  
                        _CMD_SET_OFF 024B               _PIN_MANAGER_Initialize 04B1  
               EUSART_Read@readValue 0070                        outputString@i 0078  
                       _eusartRxHead 0047                         _eusartTxHead 004A  
                       _eusartRxTail 0048                         _eusartTxTail 004B  
       ??_INTERRUPT_InterruptManager 0070                            __pswtext1 014A  
                          __pswtext2 014F                            __pswtext3 0154  
            _eusartTxBufferRemaining 0049             __size_of_TMR1_StartTimer 0003  
                     ??_outputString 0076                             _CMP1_ISR 04F5  
                        _ledSendByte 0451                       _eusartRxBuffer 0020  
                      _TMR1_CallBack 04F7                       _eusartTxBuffer 0030  
                           _LED_Task 02AF                             _LED_Test 0383  
                       _inputCommand 004C                            clear_ram0 04E2  
                           _PIE1bits 0091                             _LED_mode 0045  
                           _PIE2bits 0092  __size_of_INTERRUPT_InterruptManager 0023  
                           _PIR1bits 0011                             _PIR2bits 0012  
            ?_UART_HexSrtingToBinary 0070                             _TMR1_ISR 047B  
                  ??_TMR1_Initialize 0070                          __stringdata 0258  
            __size_of_FVR_Initialize 0004                          _EUSART_Read 0425  
                     ?_TMR1_CallBack 0070       __end_of_UART_HexSrtingToBinary 0383  
            ??_OSCILLATOR_Initialize 0070                             __ptext10 02AF  
                           __ptext11 0451                             __ptext12 0031  
                           __ptext21 047B                             __ptext13 030D  
                           __ptext22 04F7                             __ptext14 03B9  
                           __ptext23 043B                             __ptext15 040E  
                           __ptext24 0466                             __ptext16 03D9  
                           __ptext25 04F5                             __ptext17 048E  
                           __ptext18 0349                             __ptext19 0425  
                  ??_TMR1_StartTimer 0070                        __size_of_main 000E  
           __size_of_CMP1_Initialize 000B                 __end_of_outputString 03D9  
 __end_of_INTERRUPT_InterruptManager 0027           _INTERRUPT_InterruptManager 0004  
                     LED_Task@ledOFF 0044                 COMM_Task@receiveData 007C  
                         _INTCONbits 000B                      ledSendByte@data 0070  
                           memset@p1 0074                          pic14e$flags 007E  
                    ??_TMR1_CallBack 0070                             intlevel1 0000  
            ?_PIN_MANAGER_Initialize 0070                    __CFG_CLKOUTEN$OFF 0000  
                 _EUSART_Receive_ISR 0466                       _FVR_Initialize 04EE  
                ?_EUSART_Receive_ISR 0070                             strcmp@s1 0070  
                           strcmp@t0 0073                             strcmp@s2 0072  
                           strcmp@t1 0075                             strcmp@t2 0074  
                           strlen@cp 0072                   EUSART_Write@txData 0070  
       __size_of_EUSART_Transmit_ISR 0016                         ?_ledSendByte 0070  
     __end_of_PIN_MANAGER_Initialize 04C1                         ledSendByte@i 0071  
               ??_EUSART_Receive_ISR 0070                      _TMR1_Initialize 04A0  
